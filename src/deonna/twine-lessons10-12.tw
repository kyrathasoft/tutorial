:: TwineLesson010Passage001 [deonna]
<h2>$tw & $sc <span class="pulse">Lesson # 10</span> $md More on Arrays</h2>
Welcome to Lesson 10! In this lesson, we'll learn more ways to interact with arrays, and we will reveal the traumatic memory that our protagonist's caffeine-supported mind dredges [[up|TwineLesson010Passage002]].

<<tut-links "TwineLesson009Passage041" "TwineLesson010Passage002">>



:: TwineLesson010Passage002 [deonna]
We've really been in the coding weeds for the last //several// pages. If you've read this far, you're either learning, or being entertained $md or both. We'll turn our attention now to passage {{{Remembrance}}}. If you've been paying attention, you know that the only way to get to that passage is by (1) drinking two mugs of coffee $md using up your last two packets of Mount Hagen, and then (2) moving to passage {{{SkeletonHollow}}}, and //then// (3) clicking the hyperlinked word "remember". This is because passage {{{Remembrance}}} doesn't represent a physical location (as do most of the other passages $md {{{Campfire}}}, {{{YourTent}}}, {{{Cliff}}}, etc). Rather, it represents an event $md that of [[remembering|TwineLesson010Passage003]].

<<tut-links "TwineLesson010Passage001" "TwineLesson010Passage003">>



:: TwineLesson010Passage003 [deonna]
Transitioning to passage {{{Remembrance}}} is the first milestone of our $sg, not that you'd know that if I didn't tell you. We're going to be working on it, and testing by launching the game, then working some more, then testing, etc. To playthrough to {{{Remembrance}}} we have to (1) launch game, (2) goto tent, (3) get backpack, (4) get instant coffee, (5) get another packet of instant coffee, (6) set backpack aside, (7) return to {{{Campfire}}}, (8) 'consider' making a cup of coffee, (9) make coffee (10) return to {{{Make Coffee}}} and make a second serving, (11) click a link that shows us the campfire again (even though we were //at// the campfire already), (12) head southest to {{{SkeletonHollow}}}, (13) click the "remember" link. We sure don't want to have to repeat those 13 moves every single time we want to make a change to our game and want to [[re-test|TwineLesson010Passage004]].

<<tut-links "TwineLesson010Passage002" "TwineLesson010Passage004">>



:: TwineLesson010Passage004 [deonna]
We could set {{{Remembrance}}} as our startup passage, just for testing while building the game. That would work for locating us in the desired passage. But what if our $ts needs to know the values of various variables? Those variables would still be at the value they were given at the start of the game, in special passage {{{StoryInit}}}. I mean, ordinarily we'd get to passage {{{Remembrance}}} only after drinking two cups of coffee, which would change ''{{{$cupsOfCoffeeDrank}}}'' to 2 and ''{{{instantCoffeePackets}}}'' to 0. But if we just jump straight to {{{Remembrance}}} those variables will still hold their initial values of 0 and 2, respectively. If only there were a way to //simulate// actually going through all those passage transitions with their accompanying variable value [[changes|TwineLesson010Passage005]].

<<tut-links "TwineLesson010Passage003" "TwineLesson010Passage005">>



:: TwineLesson010Passage005 [deonna]
We're going to add three new functions to the bottom of our story javascript section. Currently, that section holds three functions, but it will have six after you update it to <a target="_new" href="https://gist.github.com/kyrathasoft/761aa57d78b09e32b0b09b9352416877">this</a> code listing. Your story javascript will have 79 lines of code after this update. The code for the javascript section of our $sg can also be downloaded <a target="_new" href="http://twinery.42web.io/twinery/tutorial/ts-listings/storyjs_at_lesson10.zip?i=1">here</a>, and <a target="_new" href="sftp://dh_4gg2za@pdx1-shared-a1-13.dreamhost.com/home/dh_4gg2za/bryanmiller.us/twinery/Recover/ts-listings/storyjs_at_lesson10.zip">here</a>, and <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMZ_891exm3Gwcp9yg">here</a>. It's important that the code listing I've provided is pasted into your javascript in the exact order presented, because one or more functions lower down the page are dependent upon code written earlier (above it). [[$ct|TwineLesson010Passage006]]

<<tut-links "TwineLesson010Passage004" "TwineLesson010Passage006">>



:: TwineLesson010Passage006 [deonna]
So, what did I have you add to story javascript, and why? We added the code shown on lines 28 to 79 <a target="_new" href="https://gist.github.com/kyrathasoft/761aa57d78b09e32b0b09b9352416877">here</a>.

''{{{getPassageNames}}}'': as its name suggests, this function returns an array of the names of all passages.
''{{{getTotalPassagesCount}}}'': tells us how many passages are in our $tw story.
''{{{setup.startAtRemembrance}}}'': will simulate $md with help from {{{StoryInit}}} $md playing through to passage {{{Remembrance}}}.

Notice that at the very end of our story javascript section, we //call// (i.e., "invoke") function {{{startAtRemembrance}}}. One thing this function does, upon being called, is to set a variable, {{{StartupSituation}}}, on the setup object to a value of {{{Remembrance}}}. That's key, as we'll be checking for this value in our {{{StoryInit}}}. But let's get other needed code in place, and then we can talk about how it all hangs [[together|TwineLesson010Passage007]].

<<tut-links "TwineLesson010Passage005" "TwineLesson010Passage007">>



:: TwineLesson010Passage007 [deonna]
We've modified our javascript as needed. Next, we need to modify our {{{StoryInit}}} to have <a target="_new" href="https://gist.github.com/kyrathasoft/7c08dc4db389769276eb08adeb83fa9e">this</a> code. I you prefer, you can download a zip archive holding this code <a target="_new" href="https://bryanmiller.us/twinery/Recover/ts-listings/story-init-less10-psg7-of-tutorial.zip">here</a>, <a target="_new" href=" http://twinery.42web.io/tutorial/ts-listings/story-init-less10-psg7-of-tutorial.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMcz_HngFRe7eIsPNQ">here</a>. Make changes to passage {{{StoryInit}}} now, before [[continuing|TwineLesson010Passage008]].

<<tut-links "TwineLesson010Passage006" "TwineLesson010Passage008">>



:: TwineLesson010Passage008 [deonna]
Add a new passage and name it {{{PsgCheckVars}}}. Add <a target="_new" href="https://gist.github.com/kyrathasoft/4f9030120b73cfedd9818d408363a1fc">this</a> code to it. Ensure that you give it these two tags (all lowercase): {{{noreturn}}} and {{{nobr}}}.

If preferred, you can download the {{{PsgCheckVars}}} code <a target="_new" href="https://bryanmiller.us/twinery/Recover/ts-listings/psg-checkvars-less10-psg8.zip">here</a>, or <a target="_new" href="http://twinery.42web.io/tutorial/ts-listings/psg-checkvars-less10-psg8.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMc3Yvp6DSovfKWd4A">here</a>. [[$ct|TwineLesson010Passage009]].

<<tut-links "TwineLesson010Passage007" "TwineLesson010Passage009">>



:: TwineLesson010Passage009 [deonna]
That takes care of updating javascript and {{{StoryInit}}}, and we've added new passage {{{PsgCheckVars}}}. One more thing: add the following line in passage {{{StoryMenu}}}, directly beneath the line that creates a sidebar button that links us to our player's inventory:

{{{<<link "CheckVars">><<goto PsgCheckVars>><</link>>}}}

Passage {{{StoryMenu}}} should now look like this:

{{{<<link "Inventory">><<goto YourInventory>><</link>><br>}}}
{{{<<link "CheckVars">><<goto PsgCheckVars>><</link>>}}}

If you've followed these instructions carefully and I haven't made a mistake, we should be ready to test this newest iteration of our $sg. Just in case I've made a mistake in this documentation, <a target="_new" href="http://twinery.42web.io/backups/CampfireTaleLesson010Passage009.zip">  here</a> is an archive of this story's HTML. If needed, you can download and extract it, then import the HTML into Twine $md and this will ensure you're operating with the exact same version of our sample game that I am, as of the writing of this very passage. You can also grab this <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLesson010Passage009.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMc7Zj6fOkL6uO_SYg">here</a>. 

[[$ct|TwineLesson010Passage010]]

<<tut-links "TwineLesson010Passage008" "TwineLesson010Passage010">>



:: TwineLesson010Passage010 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'psgRemembrance-tut-less10-psg09.png'">Now, when you run $tut_tit, it should take you to passage {{{Remembrance}}}, and that passage should appear as indicated by the screenshot on this page. You see some placeholder text at the top, which we'll soon replace. At the bottom you see a hyperlink back to passage {{{Campfire}}}. Between the two, you see "Turns: 14". What's that? Well, that is displayed because I added the following temporary line of code to the passage: {{{Turns: <<= State.turns>>}}} Why? In order to test that function {{{setup.startAtRemembrance()}}}, which we //call// from the last line of our story javascript, is working as [[intended|TwineLesson010Passage011]].

<<tut-links "TwineLesson010Passage009" "TwineLesson010Passage011">>




:: TwineLesson010Passage011 [deonna]
Let's tweak the code in {{{PsgCheckVars}}} so that it reflects <a target="_new" href="https://gist.github.com/kyrathasoft/14f34600b1989fd3150c4144bd665f61">this</a> code listing. Then, re-run our story and in the sidebar click the {{{CHKVARS}}} [[button|TwineLesson010Passage012]].

<<tut-links "TwineLesson010Passage010" "TwineLesson010Passage012">>



:: TwineLesson010Passage012 [deonna] 
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'chkvars-output.png'">Here is what you'll see upon clicking the sidebar's {{{CHKVARS}}} button. The two variables and the array at the top have the values we'd expect, had the player actually played through the game to reach passage {{{Remembrance}}}.  

The fourth line of text tells us that our $sg contains 15 passages, currently. You can go into the $tw editor to verify this. We're getting that value from the {{{getTotalPassagesCount()}}} function that we added to the {{{setup}}} object in our javascript section. 

And then we see a readout of the passages in our game that have been visited, and how many times each. Note that I wrote the code in passage {{{PsgCheckVars}}} to omit passages with zero visits.

In our for-loop, I use a temporary variable, {{{_trans}}} (short for passage [trans]itions) to count up total passage transitions.

Finally, at the bottom of passage {{{PsgChkVars}}} there is a link to take us back to the previous passage we were in before clicking the {{{CHKVARS}}} button in the sidebar. Were this $sg ever to be released for play (rather than solely as a vehicle for practicing our twinery), we'd probably want to suppress that sidebar [[button|TwineLesson010Passage013]].



:: TwineLesson010Passage013 [deonna]
So, we'll keep passage {{{PsgCheckVars}}} for awhile $md probably the entire duration of this tutorial, and we'll update it occasionally (when we add new story variables, etc.). It's a handy way to see if our {{{setup.startAtRemembrance()}}} function and {{{StoryInit}}} passage are cooperating the way we want. And because it's accessed through a sidebar button, passage {{{PsgCheckVars}}} is unobtrusive. It stays out of our way until we want to view its contents. Make the following slight tweak to Passage {{{Remembrance}}}:

''PLACEHOLDER TEXT

Turns: {{{<<= State.turns>>}}}, plus the goto in {{{StoryInit}}} to come to THIS passage makes {{{<<= State.turns + 1>>}}}. And if you now click the {{{CHKVARS}}} sidebar button, it will tell you there've been {{{<<=State.turns + 2>>}}} turns, because you did another passage transition into passage {{{PsgCheckVars}}}.

{{{[[Campfire]]}}}''

Let's [[$ctl|TwineLesson010Passage014]].

<<tut-links "TwineLesson010Passage012" "TwineLesson010Passage014">>



:: TwineLesson010Passage014 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'fn-start-at-remembrance.png'">Well, all right! That's a lot of work we've done, and you may not (in fact, //probably// won't) understand every single thing. I do want to take a little time and explain what's going on in our {{{setup.startAtRemembrance()}}} function. When this function is called as the $sg is loading, the function tells the web browser "Hey, the player has already navigated to (i.e., visited) the following passages..." The calls that you see to {{{addVisits()}}} are arranged in the actual order of play through the passages necessary to reach passage {{{Remembrance}}}. Count them: there are ''12'' calls to {{{addVisits()}}}. See that three of those are for {{{Campfire}}}. Apparently, $sc places the player momentarily in the Twine-defined startup passage {{{Campfire}}} before the switch statement in {{{StoryInit}}} takes them to {{{Remembrance}}}. Therefore, if you launch the game and click sidebar button {{{CHKVARS}}}, you'll see it reports ''4'' visits to {{{Campfire}}} $md the three we added using {{{addVisits()}}}, plus a millisecond-duration visit initially to {{{Campfire}}} before the {{{switch}}} statement [[kicks in|TwineLesson010Passage015]].

<<tut-links "TwineLesson010Passage013" "TwineLesson010Passage015">>



:: TwineLesson010Passage015 [deonna]
All those {{{setup.addVisits()}}} function calls are making use of the following function, which is defined earlier in the same section of javascript for our story:
<font size=-1>
''1<span class="tab">{{{setup.addVisits = (passageName, number = 1) => {}}}</span>
2<span class="tab"><span class="tab">while (number - -) {{{{}}}</span></span>
3<span class="tab"><span class="tab"><span class="tab">{{{State.expired.push(passageName);}}}</span></span></span>
4<span class="tab"><span class="tab">{{{}}}}</span></span>
5<span class="tab">{{{};}}}</span>''
</font>
What's happening in this function is that we're pushing &ldquo;visits&rdquo; onto the {{{State}}} object's {{{expired}}} array. $sc uses that array to keep a record of passage visits throughout a given playthrough. So, in our javascript section {{{setup.startAtRemembrance()}}} function, we're programmatically simulating passage visits, rather than accruing them in the normal way by playing through various [[passages|TwineLesson010Passage016]].

<<tut-links "TwineLesson010Passage014" "TwineLesson010Passage016">>



:: TwineLesson010Passage016 [deonna]
So what we have accomplished is that we've programmatically given ourselves a way to simulate playthrough to passage {{{Remembrance}}}, also simulating using up our two packets of instant coffee by drinking two cups of coffee. And the only thing we'd need to do in order to revert to the default behavior of the game starting at passage {{{Campfire}}} would be to go into our javascript section and add the following at the bottom, just below the {{{setup.startAtRemembrance()}}} function:

<font size=-1>''{{{setup.startAtNewGame = function(){}}}
  <span class="tab">setup.StartupSituation = "NewGame";</span>
{{{};}}}

{{{/* setup.startAtRemembrance(); */}}}
{{{setup.startAtNewGame();}}}''</font>

Go ahead and make the above changes, then go to the next [[page|TwineLesson010Passage017]].

<<tut-links "TwineLesson010Passage015" "TwineLesson010Passage017">>



:: TwineLesson010Passage017 [deonna]

You'll need to update the {{{<<switch>>}}} statement in the {{{StoryInit}}} passage to the following:

<font size=-1>''{{{<<switch setup.StartupSituation>>}}}
{{{<<case "NewGame">>}}}
    <span class="tab">{{{/*}}} we're in startup passage Campfire... {{{*}}}/</span>
	<span class="tab">{{{<<set $cupsOfCoffeeDrank to 0>>}}}</span>
    <span class="tab">{{{<<set $instantCoffeePackets to 2>>}}}</span>
{{{<<case "Remembrance">>}}}
	<span class="tab">{{{<<set $cupsOfCoffeeDrank to 2>>}}}</span>
    <span class="tab">{{{<<set $instantCoffeePackets to 0>>}}}</span>
	<span class="tab">{{{<<goto "Remembrance">>}}}</span>
{{{<<default>>}}}
	<span class="tab">{{{/*}}} do nothing  {{{*/}}}</span>
{{{<</switch>>}}}''</font>
    
Now, the game will start at the [[beginning|TwineLesson010Passage018]].

<<tut-links "TwineLesson010Passage016" "TwineLesson010Passage018">>



:: TwineLesson010Passage018 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'js-to-start-at-remembrance.png'">As we continue development of our $sg, we can add additional {{{setup.startAt*}}} functions as needed, and then simply modify the {{{<<switch>>}}} statement in our {{{StoryInit}}} passage. For now, modify the last few lines of our story's javascript section to match what is shown in this page's screenshot. You're wrapping the call to function {{{setup.startAtNewGame()}}} in C-style comment tags so that it's 'commented-out' (i.e., invisible to $sc). And, you're making sure that function {{{setup.startAtRemembrance()}}} is //not// commented-out. Test your changes by running the game: it should take you to passage {{{Remembrance}}}.

If anything isn't working correctly as you're following along in $tw, <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMgRT3JghwnRVQyUew">here</a> is a current snapshot of our sample game, which you can download and import. I've also made this snapshot available <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLesson010Passage018.zip">here</a> and <a target="_new" href=" http://twinery.42web.io/backups/CampfireTaleLesson010Passage018.zip">here</a> for [[download|TwineLesson010Passage019]].

<<tut-links "TwineLesson010Passage017" "TwineLesson010Passage019">>



:: TwineLesson010Passage019 [deonna]
I wrote a few pages ago that reaching passaage {{{Remembrance}}} is a game milestone. So what's so important about it? Let's modify that passage. Currently, it contains the following text/$ts:

''PLACEHOLDER TEXT

Turns: {{{<<= State.turns>>}}}, plus the goto in &lcub; &lcub; &lcub; StoryInit &rcub; &rcub; &rcub; to come to THIS passage makes {{{<<= State.turns + 1>>}}} . And if you now click the &lcub; &lcub; &lcub; CHKVARS &rcub; &rcub; &rcub; sidebar button, it will tell you there've been {{{<<=State.turns + 2>>}}} turns, because you did another passage transition into passage &lcub; &lcub; &lcub; PsgCheckVars &rcub; &rcub; &rcub;.

{{{[[Campfire]]}}}''

We're going to //comment-out// the Turns info (we can uncomment it again at any time if needed/desired). Let's make the link back to passage {{{Campfire}}} a bit more descriptive, and then we'll think about what text to replace ''PLACEHOLDER TEXT'' [[with|TwineLesson010Passage020]].

<<tut-links "TwineLesson010Passage018" "TwineLesson010Passage020">>



:: TwineLesson010Passage020 [deonna]
<img align="left" hspace=20 vspace=10 @src="setup.imgs1012 + 'remembrance-less10-psg20.png'">Okay, have you updated {{{Remembrance}}} to match the screenshot code? Good. You'll notice we've replaced the link to {{{Campfire}}} with a link to {{{SkeletonHollow}}}. This is because I realized that the important memory hits the player while the player is physically in Skeleton Hollow, so it makes sense he's there after coming back to himself after a shocking recollection. However, this introduces a problem. To see the problem, launch our $sg in your browser and click the "After remembering" link. It'll take you back to {{{SkeletonHollow}}} all, right, but then you can click on link "remember" and //again// return to {{{SkeletonHollow}}} $md and so on, bouncing back and forth between [[passages|TwineLesson010Passage021]].

<<tut-links "TwineLesson010Passage019" "TwineLesson010Passage021">>



:: TwineLesson010Passage021 [deonna]
Clearly, our intent has been that {{{Remembrance}}} is a one-visit-only milestone passage. So what do we do? Let's modify the end of passage {{{SkeletonHollow}}}, starting with line {{{<<if $cupsOfCoffeeDrank eq 2>>}}} and ending just before the closing {{{<</nobr>>}}} tag:

''{{{<<if $cupsOfCoffeeDrank eq 2>>}}}
    <span class="tab">{{{<<if not visited("Remembrance")>>}}}</span>
    		<span class="tab"><span class="tab">Your mind is in caffeine-fueled overdrive. You glance around the hollow at the surrounding pines and firs, at the boulder lying at its center, and then ... you {{{[[remember|Remembrance]]}}}!</span></span>
    <span class="tab">{{{<<else>>}}}</span>
        <span class="tab"><span class="tab">The hairs on the back of your neck stand up and you get goosebumps from the memory of what happened to you here. You resolve firmly not to return here again.</span></span>
    <span class="tab">{{{<</if>>}}}</span>
{{{<</if>>}}}''

The above is an example of nested conditionals. The outer ''if'' conditional is satifisfied when variable ''{{{$cupsOfCoffeeDrank}}}'' is equal to 2. But then after //that// condition is satisfied, one of two possible blocks of text is shown to the player, depending upon whether or not the player has visited passage {{{Remembrance}}} before. If she //has// been here before, then the {{{else}}} class of the inner ''{{{if}}}'' is [[triggered|TwineLesson010Passage022]].

<<tut-links "TwineLesson010Passage020" "TwineLesson010Passage022">>



:: TwineLesson010Passage022 [deonna]
And then, sure enough, when we return to {{{Campfire}}}, we read //The mossy knoll on which your campfire is located slopes gradually downhill to the frightful hollow you'll never set foot in again, leading to a copse of firs and evergreens.// $md and indeed, there is no longer a link to {{{SkeletonHollow}}}.

What frightening recollection could prove so traumatizing that the main character of our story avoids the hollow? Our {{{Campfire}}} passage code should now look like <a target="_new" href="https://gist.github.com/kyrathasoft/e70451b12f47da48880a3f1f40b63f20">this</a>; {{{SkeletonHollow}}} like <a target="_new" href="https://gist.github.com/kyrathasoft/cd5fc81ccee3531dcdf38b21fdf2cac3">this</a>; and {{{Remembrance}}} like <a target="_new" href="https://gist.github.com/kyrathasoft/6dda05c4be56d7a430992252d4f7be18">this</a>.

Let's [[$ct|TwineLesson010Passage023]]

<<tut-links "TwineLesson010Passage021" "TwineLesson010Passage023">>



:: TwineLesson010Passage023
<a target="_new" href="https://intfiction.org/u/greyelf/summary">GreyElf</a>, a very knowledgeable poster on intfiction.org <a target="_new" href="https://intfiction.org/t/does-state-turns-include-a-visit-to-storyinit/74571/9">provided</a> me a superior way to do testing starting from the {{{Remembrance}}} passage. As a result, the contents on the javascript section of our sample game have changed, as have the contents of {{{StoryInit}}}.

The easiest way to bring you copy of the sample game up-to-date is to download and extract <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMh-rphifMBO88NBXg">this</a> HTML and import it back into Twine $md or get it <a target="_new" href=" http://twinery.42web.io/backups/CampfireTaleLesson010Passage023.zip">here</a> or <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLesson010Passage023.zip">here</a>.

{{{StoryInit}}} should now match <a target="_new" href="https://gist.github.com/kyrathasoft/b22b2b50de7729abffb214c1b50132b6">this</a>. The javascript section should now look like <a target="_new" href="https://gist.github.com/kyrathasoft/58c18a214325432ad5c26901e139344e">this</a>. And <a target="_new" href="https://gist.github.com/kyrathasoft/e0c05367cb42d85f131ad59e1e58d599">here</a> are the contents that need to go into new passage {{{TestingRemembrance}}} (which you'll need to create).  

Let's [[$ct|TwineLesson010Passage024]]

<<tut-links "TwineLesson010Passage022" "TwineLesson010Passage024">>



:: TwineLesson010Passage024
If you're interested in the details of the changes I've made $md with GreyElf's help $md to the start-at-psg-Remembrance code, I'll get into it later. For now, just know that this change decreases the likelihood of introducing bugs into our $sg. 

[[$ct|TwineLesson010Passage025]]

<<tut-links "TwineLesson010Passage023" "TwineLesson010Passage025">>



:: TwineLesson010Passage025
<img align="left" hspace=15 vspace=5 @src="setup.imgs1012 + 'unwanted-space-in-remembrance.png'">Why is that unwanted vertical space between our placeholder text and the link, in passage {{{Remembrance}}}? Because of the multiline comment I've left in the passage. Here's how we'll fix that: give passage {{{Remembrance}}} the 'nobr' tag. Then, add a pair of line-break in the <a target="_new" href="https://gist.github.com/kyrathasoft/24181f8af1dea803276cf945d228c5d5">right</a> [[places|TwineLesson010Passage026]].

<<tut-links "TwineLesson010Passage024" "TwineLesson010Passage026">>



:: TwineLesson010Passage026
We're going to replace our PLACEHOLDER TEXT in passage {{{Remembrance}}}, and in so doing I'm going to show you how to reuse the same passage multiple times. 

Let's say that we've brainstormed and come up with three paragraphs that describe the ''Big Reveal'' regarding the main character's recollection of a past traumatic event here in the woods, in a hollow not far from the campfire. We could put all of it into the same passage, but some players don't like Walls-of-Text. Or, we could use a separate passage for each paragraph, but then we have to link the passages in the correct order, //and// our $tw storyboard would quickly fill up with passages. 

Trust me that when working in the $tw graphical editor, once you get beyond a few dozen passages it becomes a hairy mess trying to keep everything organized $md more on an alternative $tw-coding setup (using <a target="_new" href="https://code.visualstudio.com/">Visual Studio Code</a> and <a target="_new" href="https://www.motoslave.net/tweego/">Tweego</a>) a bit later in this tutorial [[series|TwineLesson010Passage027]].

<<tut-links "TwineLesson010Passage025" "TwineLesson010Passage027">>



:: TwineLesson010Passage027
<img align="left" hspace=15 vspace=5 @src="setup.imgs1012 + 'self-referencing-remembrance.png'">I'm going to ask you to copy/paste the $ts from <a target="_new" href="https://gist.github.com/kyrathasoft/a06aa5529e53d8bdce1b0b0a197a0bfa">here</a> into your {{{Remembrance}}} passage. Once you do this, look at the storyboard area of the $tw editor, where the passages are visually depicted. You'll see that our {{{Remembrance}}} passage does indeed now loop back on itself. If you now launch the $sg, you'll be take to {{{Remembrance}}} $md 1st visit. Click the link to return to the same passage $md 2nd visit; and again for 3rd. After that, we return to {{{SkeletonHollow}}}.

We could just as easily use the same passage $md or //any// passage $md twenty times, or even [[ninety-nine|TwineLesson010Passage028]].

<<tut-links "TwineLesson010Passage026" "TwineLesson010Passage028">>



:: TwineLesson010Passage028
<img align="left" hspace=15 vspace=5 @src="setup.imgs1012 + 'multi-visit-switch.png'">Do you understand why the screenshotted code works? We're setting a temp variable $md ''_v'' to the number of times passage {{{Remembrance}}} has been visited. Then, our {{{<<switch>>}}} statement causes different text and link to be shown for each visit.

Let's now add our text for visit #1 to {{{Remembrance}}}: <a target="_new" href="https://gist.github.com/kyrathasoft/d4a6c5791c5e42380521ac3cd377930f">here</a> is what {{{Remembrance}}} should look like $md feel free to copy/paste. Once you've updated the passage, run our game again and test it. 

Did you test it? Interesting results, eh? Unless you have had previous experience with the $sc story format, or some other format with a similar macro, you've not likely seen what you're seeing here: multiple links in the same passage, each revealing additional [[text|TwineLesson010Passage029]].

<<tut-links "TwineLesson010Passage027" "TwineLesson010Passage029">>



:: TwineLesson010Passage029
Introducing the {{{<<linkreplace>>}}} macro.



