:: TwineLesson010Passage001 [deonna]
<h2>$tw & $sc <span class="pulse">Lesson # 10</span> $md More on Arrays</h2>
Welcome to Lesson 10! In this lesson, we'll learn more ways to interact with arrays, and we will reveal the traumatic memory that our protagonist's caffeine-supported mind dredges [[up|TwineLesson010Passage002]].

<<tut-links "TwineLesson009Passage041" "TwineLesson010Passage002">>



:: TwineLesson010Passage002 [deonna]
We've really been in the coding weeds for the last //several// pages. If you've read this far, you're either learning, or being entertained $md or both. We'll turn our attention now to passage {{{Remembrance}}}. If you've been paying attention, you know that the only way to get to that passage is by (1) drinking two mugs of coffee $md using up your last two packets of Mount Hagen, and then (2) moving to passage {{{SkeletonHollow}}}, and //then// (3) clicking the hyperlinked word "remember". This is because passage {{{Remembrance}}} doesn't represent a physical location (as do most of the other passages $md {{{Campfire}}}, {{{YourTent}}}, {{{Cliff}}}, etc). Rather, it represents an event $md that of [[remembering|TwineLesson010Passage003]].

<<tut-links "TwineLesson010Passage001" "TwineLesson010Passage003">>



:: TwineLesson010Passage003 [deonna]
Transitioning to passage {{{Remembrance}}} is the first milestone of our $sg, not that you'd know that if I didn't tell you. We're going to be working on it, and testing by launching the game, then working some more, then testing, etc. To playthrough to {{{Remembrance}}} we have to (1) launch game, (2) goto tent, (3) get backpack, (4) get instant coffee, (5) get another packet of instant coffee, (6) set backpack aside, (7) return to {{{Campfire}}}, (8) 'consider' making a cup of coffee, (9) make coffee (10) return to {{{Make Coffee}}} and make a second serving, (11) click a link that shows us the campfire again (even though we were //at// the campfire already), (12) head southest to {{{SkeletonHollow}}}, (13) click the "remember" link. We sure don't want to have to repeat those 13 moves every single time we want to make a change to our game and want to [[re-test|TwineLesson010Passage004]].

<<tut-links "TwineLesson010Passage002" "TwineLesson010Passage004">>



:: TwineLesson010Passage004 [deonna]
We could set {{{Remembrance}}} as our startup passage, just for testing while building the game. That would work for locating us in the desired passage. But what if our $ts needs to know the values of various variables? Those variables would still be at the value they were given at the start of the game, in special passage {{{StoryInit}}}. I mean, ordinarily we'd get to passage {{{Remembrance}}} only after drinking two cups of coffee, which would change ''{{{$cupsOfCoffeeDrank}}}'' to 2 and ''{{{instantCoffeePackets}}}'' to 0. But if we just jump straight to {{{Remembrance}}} those variables will still hold their initial values of 0 and 2, respectively. If only there were a way to //simulate// actually going through all those passage transitions with their accompanying variable value [[changes|TwineLesson010Passage005]].

<<tut-links "TwineLesson010Passage003" "TwineLesson010Passage005">>



:: TwineLesson010Passage005 [deonna]
We're going to add three new functions to the bottom of our story javascript section. Currently, that section holds three functions, but it will have six after you update it to <a target="_new" href="https://gist.github.com/kyrathasoft/761aa57d78b09e32b0b09b9352416877">this</a> code listing. Your story javascript will have 79 lines of code after this update. The code for the javascript section of our $sg can also be downloaded <a target="_new" href="http://twinery.42web.io/twinery/tutorial/ts-listings/storyjs_at_lesson10.zip?i=1">here</a>, and <a target="_new" href="sftp://dh_4gg2za@pdx1-shared-a1-13.dreamhost.com/home/dh_4gg2za/bryanmiller.us/twinery/Recover/ts-listings/storyjs_at_lesson10.zip">here</a>, and <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMZ_891exm3Gwcp9yg">here</a>. It's important that the code listing I've provided is pasted into your javascript in the exact order presented, because one or more functions lower down the page are dependent upon code written earlier (above it). [[$ct|TwineLesson010Passage006]]

<<tut-links "TwineLesson010Passage004" "TwineLesson010Passage006">>



:: TwineLesson010Passage006 [deonna]
So, what did I have you add to story javascript, and why? We added the code shown on lines 28 to 79 <a target="_new" href="https://gist.github.com/kyrathasoft/761aa57d78b09e32b0b09b9352416877">here</a>.

''{{{getPassageNames}}}'': as its name suggests, this function returns an array of the names of all passages.
''{{{getTotalPassagesCount}}}'': tells us how many passages are in our $tw story.
''{{{setup.startAtRemembrance}}}'': will simulate $md with help from {{{StoryInit}}} $md playing through to passage {{{Remembrance}}}.

Notice that at the very end of our story javascript section, we //call// (i.e., "invoke") function {{{startAtRemembrance}}}. One thing this function does, upon being called, is to set a variable, {{{StartupSituation}}}, on the setup object to a value of {{{Remembrance}}}. That's key, as we'll be checking for this value in our {{{StoryInit}}}. But let's get other needed code in place, and then we can talk about how it all hangs [[together|TwineLesson010Passage007]].

<<tut-links "TwineLesson010Passage005" "TwineLesson010Passage007">>



:: TwineLesson010Passage007 [deonna]
We've modified our javascript as needed. Next, we need to modify our {{{StoryInit}}} to have <a target="_new" href="https://gist.github.com/kyrathasoft/7c08dc4db389769276eb08adeb83fa9e">this</a> code. I you prefer, you can download a zip archive holding this code <a target="_new" href="https://bryanmiller.us/twinery/Recover/ts-listings/story-init-less10-psg7-of-tutorial.zip">here</a>, <a target="_new" href=" http://twinery.42web.io/tutorial/ts-listings/story-init-less10-psg7-of-tutorial.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMcz_HngFRe7eIsPNQ">here</a>. Make changes to passage {{{StoryInit}}} now, before [[continuing|TwineLesson010Passage008]].

<<tut-links "TwineLesson010Passage006" "TwineLesson010Passage008">>



:: TwineLesson010Passage008 [deonna]
Add a new passage and name it {{{PsgCheckVars}}}. Add <a target="_new" href="https://gist.github.com/kyrathasoft/4f9030120b73cfedd9818d408363a1fc">this</a> code to it. Ensure that you give it these two tags (all lowercase): {{{noreturn}}} and {{{nobr}}}.

If preferred, you can download the {{{PsgCheckVars}}} code <a target="_new" href="https://bryanmiller.us/twinery/Recover/ts-listings/psg-checkvars-less10-psg8.zip">here</a>, or <a target="_new" href="http://twinery.42web.io/tutorial/ts-listings/psg-checkvars-less10-psg8.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMc3Yvp6DSovfKWd4A">here</a>. [[$ct|TwineLesson010Passage009]].

<<tut-links "TwineLesson010Passage007" "TwineLesson010Passage009">>



:: TwineLesson010Passage009 [deonna]
That takes care of updating javascript and {{{StoryInit}}}, and we've added new passage {{{PsgCheckVars}}}. One more thing: add the following line in passage {{{StoryMenu}}}, directly beneath the line that creates a sidebar button that links us to our player's inventory:

{{{<<link "CheckVars">><<goto PsgCheckVars>><</link>>}}}

Passage {{{StoryMenu}}} should now look like this:

{{{<<link "Inventory">><<goto YourInventory>><</link>><br>}}}
{{{<<link "CheckVars">><<goto PsgCheckVars>><</link>>}}}

If you've followed these instructions carefully and I haven't made a mistake, we should be ready to test this newest iteration of our $sg. Just in case I've made a mistake in this documentation, <a target="_new" href="http://twinery.42web.io/backups/CampfireTaleLesson010Passage009.zip">  here</a> is an archive of this story's HTML. If needed, you can download and extract it, then import the HTML into Twine $md and this will ensure you're operating with the exact same version of our sample game that I am, as of the writing of this very passage. You can also grab this <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLesson010Passage009.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMc7Zj6fOkL6uO_SYg">here</a>. 

[[$ct|TwineLesson010Passage010]]

<<tut-links "TwineLesson010Passage008" "TwineLesson010Passage010">>



:: TwineLesson010Passage010 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'psgRemembrance-tut-less10-psg09.png'">Now, when you run $tut_tit, it should take you to passage {{{Remembrance}}}, and that passage should appear as indicated by the screenshot on this page. You see some placeholder text at the top, which we'll soon replace. At the bottom you see a hyperlink back to passage {{{Campfire}}}. Between the two, you see "Turns: 14". What's that? Well, that is displayed because I added the following temporary line of code to the passage: {{{Turns: <<= State.turns>>}}} Why? In order to test that function {{{setup.startAtRemembrance()}}}, which we //call// from the last line of our story javascript, is working as [[intended|TwineLesson010Passage011]].

<<tut-links "TwineLesson010Passage009" "TwineLesson010Passage011">>




:: TwineLesson010Passage011 [deonna]
Let's tweak the code in {{{PsgCheckVars}}} so that it reflects <a target="_new" href="https://gist.github.com/kyrathasoft/14f34600b1989fd3150c4144bd665f61">this</a> code listing. Then, re-run our story and in the sidebar click the {{{CHKVARS}}} [[button|TwineLesson010Passage012]].

<<tut-links "TwineLesson010Passage010" "TwineLesson010Passage012">>



:: TwineLesson010Passage012 [deonna] 
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'chkvars-output.png'">Here is what you'll see upon clicking the sidebar's {{{CHKVARS}}} button.



:: TwineLesson010Passage013 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs79 + 'fn-start-at-remembrance.png'">This is the function that gets called at the very end of our story javascript section. Remember, everything in the javascript section gets executed before the first passage is even displayed to the player. And, in fact, our story javascript execution even precedes the excecution of the contents of {{{StoryInit}}}. Count the number of programmatically-made passage //visits// are in the function: twelve. Add to that 

