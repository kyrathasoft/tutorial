:: TwineLesson010Passage001 [deonna]
<h2>$tw & $sc <span class="pulse">Lesson # 10</span> $md More on Arrays</h2>
Welcome to Lesson 10! In this lesson, we'll learn more ways to interact with arrays, and we will reveal the traumatic memory that our protagonist's caffeine-supported mind dredges [[up|TwineLesson010Passage002]].

<<tut-links "TwineLesson009Passage041" "TwineLesson010Passage002">>



:: TwineLesson010Passage002 [deonna]
We've really been in the coding weeds for the last //several// pages. If you've read this far, you're either learning, or being entertained $md or both. We'll turn our attention now to passage {{{Remembrance}}}. If you've been paying attention, you know that the only way to get to that passage is by (1) drinking two mugs of coffee $md using up your last two packets of Mount Hagen, and then (2) moving to passage {{{SkeletonHollow}}}, and //then// (3) clicking the hyperlinked word "remember". This is because passage {{{Remembrance}}} doesn't represent a physical location (as do most of the other passages $md {{{Campfire}}}, {{{YourTent}}}, {{{Cliff}}}, etc). Rather, it represents an event $md that of [[remembering|TwineLesson010Passage003]].

<<tut-links "TwineLesson010Passage001" "TwineLesson010Passage003">>



:: TwineLesson010Passage003 [deonna]
Transitioning to passage {{{Remembrance}}} is the first milestone of our $sg, not that you'd know that if I didn't tell you. We're going to be working on it, and testing by launching the game, then working some more, then testing, etc. To playthrough to {{{Remembrance}}} we have to (1) launch game, (2) goto tent, (3) get backpack, (4) get instant coffee, (5) get another packet of instant coffee, (6) set backpack aside, (7) return to {{{Campfire}}}, (8) 'consider' making a cup of coffee, (9) make coffee (10) return to {{{Make Coffee}}} and make a second serving, (11) click a link that shows us the campfire again (even though we were //at// the campfire already), (12) head southest to {{{SkeletonHollow}}}, (13) click the "remember" link. We sure don't want to have to repeat those 13 moves every single time we want to make a change to our game and want to [[re-test|TwineLesson010Passage004]].

<<tut-links "TwineLesson010Passage002" "TwineLesson010Passage004">>



:: TwineLesson010Passage004 [deonna]
We could set {{{Remembrance}}} as our startup passage, just for testing while building the game. That would work for locating us in the desired passage. But what if our $ts needs to know the values of various variables? Those variables would still be at the value they were given at the start of the game, in special passage {{{StoryInit}}}. I mean, ordinarily we'd get to passage {{{Remembrance}}} only after drinking two cups of coffee, which would change ''{{{$cupsOfCoffeeDrank}}}'' to 2 and ''{{{instantCoffeePackets}}}'' to 0. But if we just jump straight to {{{Remembrance}}} those variables will still hold their initial values of 0 and 2, respectively. If only there were a way to //simulate// actually going through all those passage transitions with their accompanying variable value [[changes|TwineLesson010Passage005]].

<<tut-links "TwineLesson010Passage003" "TwineLesson010Passage005">>



:: TwineLesson010Passage005 [deonna]
We're going to add three new functions to the bottom of our story javascript section. Currently, that section holds three functions, but it will have six after you update it to <a target="_new" href="https://gist.github.com/kyrathasoft/761aa57d78b09e32b0b09b9352416877">this</a> code listing. Your story javascript will have 79 lines of code after this update. The code for the javascript section of our $sg can also be downloaded <a target="_new" href="http://twinery.42web.io/twinery/tutorial/ts-listings/storyjs_at_lesson10.zip?i=1">here</a>, and <a target="_new" href="sftp://dh_4gg2za@pdx1-shared-a1-13.dreamhost.com/home/dh_4gg2za/bryanmiller.us/twinery/Recover/ts-listings/storyjs_at_lesson10.zip">here</a>, and <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMZ_891exm3Gwcp9yg">here</a>. It's important that the code listing I've provided is pasted into your javascript in the exact order presented, because one or more functions lower down the page are dependent upon code written earlier (above it). [[$ct|TwineLesson010Passage006]]

<<tut-links "TwineLesson010Passage004" "TwineLesson010Passage006">>



:: TwineLesson010Passage006 [deonna]
So, what did I have you add to story javascript, and why? We added the code shown on lines 28 to 79 <a target="_new" href="https://gist.github.com/kyrathasoft/761aa57d78b09e32b0b09b9352416877">here</a>.

''{{{getPassageNames}}}'': as its name suggests, this function returns an array of the names of all passages.
''{{{getTotalPassagesCount}}}'': tells us how many passages are in our $tw story.
''{{{setup.startAtRemembrance}}}'': will simulate $md with help from {{{StoryInit}}} $md playing through to passage {{{Remembrance}}}.

Notice that at the very end of our story javascript section, we //call// (i.e., "invoke") function {{{startAtRemembrance}}}. One thing this function does, upon being called, is to set a variable, {{{StartupSituation}}}, on the setup object to a value of {{{Remembrance}}}. That's key, as we'll be checking for this value in our {{{StoryInit}}}. But let's get other needed code in place, and then we can talk about how it all hangs [[together|TwineLesson010Passage007]].

<<tut-links "TwineLesson010Passage005" "TwineLesson010Passage007">>



:: TwineLesson010Passage007 [deonna]
We've modified our javascript as needed. Next, we need to modify our {{{StoryInit}}} to have <a target="_new" href="https://gist.github.com/kyrathasoft/7c08dc4db389769276eb08adeb83fa9e">this</a> code. I you prefer, you can download a zip archive holding this code <a target="_new" href="https://bryanmiller.us/twinery/Recover/ts-listings/story-init-less10-psg7-of-tutorial.zip">here</a>, <a target="_new" href=" http://twinery.42web.io/tutorial/ts-listings/story-init-less10-psg7-of-tutorial.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMcz_HngFRe7eIsPNQ">here</a>. Make changes to passage {{{StoryInit}}} now, before [[continuing|TwineLesson010Passage008]].

<<tut-links "TwineLesson010Passage006" "TwineLesson010Passage008">>



:: TwineLesson010Passage008 [deonna]
Add a new passage and name it {{{PsgCheckVars}}}. Add <a target="_new" href="https://gist.github.com/kyrathasoft/4f9030120b73cfedd9818d408363a1fc">this</a> code to it. Ensure that you give it these two tags (all lowercase): {{{noreturn}}} and {{{nobr}}}.

If preferred, you can download the {{{PsgCheckVars}}} code <a target="_new" href="https://bryanmiller.us/twinery/Recover/ts-listings/psg-checkvars-less10-psg8.zip">here</a>, or <a target="_new" href="http://twinery.42web.io/tutorial/ts-listings/psg-checkvars-less10-psg8.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMc3Yvp6DSovfKWd4A">here</a>. [[$ct|TwineLesson010Passage009]].

<<tut-links "TwineLesson010Passage007" "TwineLesson010Passage009">>



:: TwineLesson010Passage009 [deonna]
That takes care of updating javascript and {{{StoryInit}}}, and we've added new passage {{{PsgCheckVars}}}. One more thing: add the following line in passage {{{StoryMenu}}}, directly beneath the line that creates a sidebar button that links us to our player's inventory:

{{{<<link "CheckVars">><<goto PsgCheckVars>><</link>>}}}

Passage {{{StoryMenu}}} should now look like this:

{{{<<link "Inventory">><<goto YourInventory>><</link>><br>}}}
{{{<<link "CheckVars">><<goto PsgCheckVars>><</link>>}}}

If you've followed these instructions carefully and I haven't made a mistake, we should be ready to test this newest iteration of our $sg. Just in case I've made a mistake in this documentation, <a target="_new" href="http://twinery.42web.io/backups/CampfireTaleLesson010Passage009.zip">  here</a> is an archive of this story's HTML. If needed, you can download and extract it, then import the HTML into Twine $md and this will ensure you're operating with the exact same version of our sample game that I am, as of the writing of this very passage. You can also grab this <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLesson010Passage009.zip">here</a>, or <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMc7Zj6fOkL6uO_SYg">here</a>. 

[[$ct|TwineLesson010Passage010]]

<<tut-links "TwineLesson010Passage008" "TwineLesson010Passage010">>



:: TwineLesson010Passage010 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'psgRemembrance-tut-less10-psg09.png'">Now, when you run $tut_tit, it should take you to passage {{{Remembrance}}}, and that passage should appear as indicated by the screenshot on this page. You see some placeholder text at the top, which we'll soon replace. At the bottom you see a hyperlink back to passage {{{Campfire}}}. Between the two, you see "Turns: 14". What's that? Well, that is displayed because I added the following temporary line of code to the passage: {{{Turns: <<= State.turns>>}}} Why? In order to test that function {{{setup.startAtRemembrance()}}}, which we //call// from the last line of our story javascript, is working as [[intended|TwineLesson010Passage011]].

<<tut-links "TwineLesson010Passage009" "TwineLesson010Passage011">>




:: TwineLesson010Passage011 [deonna]
Let's tweak the code in {{{PsgCheckVars}}} so that it reflects <a target="_new" href="https://gist.github.com/kyrathasoft/14f34600b1989fd3150c4144bd665f61">this</a> code listing. Then, re-run our story and in the sidebar click the {{{CHKVARS}}} [[button|TwineLesson010Passage012]].

<<tut-links "TwineLesson010Passage010" "TwineLesson010Passage012">>



:: TwineLesson010Passage012 [deonna] 
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'chkvars-output.png'">Here is what you'll see upon clicking the sidebar's {{{CHKVARS}}} button. The two variables and the array at the top have the values we'd expect, had the player actually played through the game to reach passage {{{Remembrance}}}.  

The fourth line of text tells us that our $sg contains 15 passages, currently. You can go into the $tw editor to verify this. We're getting that value from the {{{getTotalPassagesCount()}}} function that we added to the {{{setup}}} object in our javascript section. 

And then we see a readout of the passages in our game that have been visited, and how many times each. Note that I wrote the code in passage {{{PsgCheckVars}}} to omit passages with zero visits.

In our for-loop, I use a temporary variable, {{{_trans}}} (short for passage [trans]itions) to count up total passage transitions.

Finally, at the bottom of passage {{{PsgChkVars}}} there is a link to take us back to the previous passage we were in before clicking the {{{CHKVARS}}} button in the sidebar. Were this $sg ever to be released for play (rather than solely as a vehicle for practicing our twinery), we'd probably want to suppress that sidebar [[button|TwineLesson010Passage013]].



:: TwineLesson010Passage013 [deonna]
So, we'll keep passage {{{PsgCheckVars}}} for awhile $md probably the entire duration of this tutorial, and we'll update it occasionally (when we add new story variables, etc.). It's a handy way to see if our {{{setup.startAtRemembrance()}}} function and {{{StoryInit}}} passage are cooperating the way we want. And because it's accessed through a sidebar button, passage {{{PsgCheckVars}}} is unobtrusive. It stays out of our way until we want to view its contents. Make the following slight tweak to Passage {{{Remembrance}}}:

''PLACEHOLDER TEXT

Turns: {{{<<= State.turns>>}}}, plus the goto in {{{StoryInit}}} to come to THIS passage makes {{{<<= State.turns + 1>>}}}. And if you now click the {{{CHKVARS}}} sidebar button, it will tell you there've been {{{<<=State.turns + 2>>}}} turns, because you did another passage transition into passage {{{PsgCheckVars}}}.

{{{[[Campfire]]}}}''

Let's [[$ctl|TwineLesson010Passage014]].

<<tut-links "TwineLesson010Passage012" "TwineLesson010Passage014">>



:: TwineLesson010Passage014 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'fn-start-at-remembrance.png'">Well, all right! That's a lot of work we've done, and you may not (in fact, //probably// won't) understand every single thing. I do want to take a little time and explain what's going on in our {{{setup.startAtRemembrance()}}} function. When this function is called as the $sg is loading, the function tells the web browser "Hey, the player has already navigated to (i.e., visited) the following passages..." The calls that you see to {{{addVisits()}}} are arranged in the actual order of play through the passages necessary to reach passage {{{Remembrance}}}. Count them: there are ''12'' calls to {{{addVisits()}}}. See that three of those are for {{{Campfire}}}. Apparently, $sc places the player momentarily in the Twine-defined startup passage {{{Campfire}}} before the switch statement in {{{StoryInit}}} takes them to {{{Remembrance}}}. Therefore, if you launch the game and click sidebar button {{{CHKVARS}}}, you'll see it reports ''4'' visits to {{{Campfire}}} $md the three we added using {{{addVisits()}}}, plus a millisecond-duration visit initially to {{{Campfire}}} before the {{{switch}}} statement [[kicks in|TwineLesson010Passage015]].

<<tut-links "TwineLesson010Passage013" "TwineLesson010Passage015">>



:: TwineLesson010Passage015 [deonna]
All those {{{setup.addVisits()}}} function calls are making use of the following function, which is defined earlier in the same section of javascript for our story:
<font size=-1>
''1<span class="tab">{{{setup.addVisits = (passageName, number = 1) => {}}}</span>
2<span class="tab"><span class="tab">while (number - -) {{{{}}}</span></span>
3<span class="tab"><span class="tab"><span class="tab">{{{State.expired.push(passageName);}}}</span></span></span>
4<span class="tab"><span class="tab">{{{}}}}</span></span>
5<span class="tab">{{{};}}}</span>''
</font>
What's happening in this function is that we're pushing &ldquo;visits&rdquo; onto the {{{State}}} object's {{{expired}}} array. $sc uses that array to keep a record of passage visits throughout a given playthrough. So, in our javascript section {{{setup.startAtRemembrance()}}} function, we're programmatically simulating passage visits, rather than accruing them in the normal way by playing through various [[passages|TwineLesson010Passage016]].

<<tut-links "TwineLesson010Passage014" "TwineLesson010Passage016">>



:: TwineLesson010Passage016 [deonna]
So what we have accomplished is that we've programmatically given ourselves a way to simulate playthrough to passage {{{Remembrance}}}, also simulating using up our two packets of instant coffee by drinking two cups of coffee. And the only thing we'd need to do in order to revert to the default behavior of the game starting at passage {{{Campfire}}} would be to go into our javascript section and add the following at the bottom, just below the {{{setup.startAtRemembrance()}}} function:

<font size=-1>''{{{setup.startAtNewGame = function(){}}}
  <span class="tab">setup.StartupSituation = "NewGame";</span>
{{{};}}}

{{{/* setup.startAtRemembrance(); */}}}
{{{setup.startAtNewGame();}}}''</font>

Go ahead and make the above changes, then go to the next [[page|TwineLesson010Passage017]].

<<tut-links "TwineLesson010Passage015" "TwineLesson010Passage017">>



:: TwineLesson010Passage017 [deonna]

You'll need to update the {{{<<switch>>}}} statement in the {{{StoryInit}}} passage to the following:

<font size=-1>''{{{<<switch setup.StartupSituation>>}}}
{{{<<case "NewGame">>}}}
    <span class="tab">{{{/*}}} we're in startup passage Campfire... {{{*}}}/</span>
	<span class="tab">{{{<<set $cupsOfCoffeeDrank to 0>>}}}</span>
    <span class="tab">{{{<<set $instantCoffeePackets to 2>>}}}</span>
{{{<<case "Remembrance">>}}}
	<span class="tab">{{{<<set $cupsOfCoffeeDrank to 2>>}}}</span>
    <span class="tab">{{{<<set $instantCoffeePackets to 0>>}}}</span>
	<span class="tab">{{{<<goto "Remembrance">>}}}</span>
{{{<<default>>}}}
	<span class="tab">{{{/*}}} do nothing  {{{*/}}}</span>
{{{<</switch>>}}}''</font>
    
Now, the game will start at the [[beginning|TwineLesson010Passage018]].

<<tut-links "TwineLesson010Passage016" "TwineLesson010Passage018">>



:: TwineLesson010Passage018 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs79 + 'js-to-start-at-remembrance.png'">As we continue development of our $sg, we can add additional {{{setup.startAt*}}} functions as needed, and then simply modify the {{{<<switch>>}}} statement in our {{{StoryInit}}} passage. For now, modify the last few lines of our story's javascript section to match what is shown in this page's screenshot. You're wrapping the call to function {{{setup.startAtNewGame()}}} in C-style comment tags so that it's 'commented-out' (i.e., invisible to $sc). And, you're making sure that function {{{setup.startAtRemembrance()}}} is //not// commented-out. Test your changes by running the game: it should take you to passage {{{Remembrance}}}.

If anything isn't working correctly as you're following along in $tw, <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMgRT3JghwnRVQyUew">here</a> is a current snapshot of our sample game, which you can download and import. I've also made this snapshot available <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLesson010Passage018.zip">here</a> and <a target="_new" href=" http://twinery.42web.io/backups/CampfireTaleLesson010Passage018.zip">here</a> for [[download|TwineLesson010Passage019]].

<<tut-links "TwineLesson010Passage017" "TwineLesson010Passage019">>



:: TwineLesson010Passage019 [deonna]
I wrote a few pages ago that reaching passaage {{{Remembrance}}} is a game milestone. So what's so important about it? Let's modify that passage. Currently, it contains the following text/$ts:

''PLACEHOLDER TEXT

Turns: {{{<<= State.turns>>}}}, plus the goto in &lcub; &lcub; &lcub; StoryInit &rcub; &rcub; &rcub; to come to THIS passage makes {{{<<= State.turns + 1>>}}} . And if you now click the &lcub; &lcub; &lcub; CHKVARS &rcub; &rcub; &rcub; sidebar button, it will tell you there've been {{{<<=State.turns + 2>>}}} turns, because you did another passage transition into passage &lcub; &lcub; &lcub; PsgCheckVars &rcub; &rcub; &rcub;.

{{{[[Campfire]]}}}''

We're going to //comment-out// the Turns info (we can uncomment it again at any time if needed/desired). Let's make the link back to passage {{{Campfire}}} a bit more descriptive, and then we'll think about what text to replace ''PLACEHOLDER TEXT'' [[with|TwineLesson010Passage020]].

<<tut-links "TwineLesson010Passage018" "TwineLesson010Passage020">>



:: TwineLesson010Passage020 [deonna]
<img align="left" hspace=20 vspace=10 @src="setup.imgs1012 + 'remembrance-less10-psg20.png'">Okay, have you updated {{{Remembrance}}} to match the screenshot code? Good. You'll notice we've replaced the link to {{{Campfire}}} with a link to {{{SkeletonHollow}}}. This is because I realized that the important memory hits the player while the player is physically in Skeleton Hollow, so it makes sense he's there after coming back to himself after a shocking recollection. However, this introduces a problem. To see the problem, launch our $sg in your browser and click the "After remembering" link. It'll take you back to {{{SkeletonHollow}}} all, right, but then you can click on link "remember" and //again// return to {{{SkeletonHollow}}} $md and so on, bouncing back and forth between [[passages|TwineLesson010Passage021]].

<<tut-links "TwineLesson010Passage019" "TwineLesson010Passage021">>



:: TwineLesson010Passage021 [deonna]
Clearly, our intent has been that {{{Remembrance}}} is a one-visit-only milestone passage. So what do we do? Let's modify the end of passage {{{SkeletonHollow}}}, starting with line {{{<<if $cupsOfCoffeeDrank eq 2>>}}} and ending just before the closing {{{<</nobr>>}}} tag:

''{{{<<if $cupsOfCoffeeDrank eq 2>>}}}
    <span class="tab">{{{<<if not visited("Remembrance")>>}}}</span>
    		<span class="tab"><span class="tab">Your mind is in caffeine-fueled overdrive. You glance around the hollow at the surrounding pines and firs, at the boulder lying at its center, and then ... you {{{[[remember|Remembrance]]}}}!</span></span>
    <span class="tab">{{{<<else>>}}}</span>
        <span class="tab"><span class="tab">The hairs on the back of your neck stand up and you get goosebumps from the memory of what happened to you here. You resolve firmly not to return here again.</span></span>
    <span class="tab">{{{<</if>>}}}</span>
{{{<</if>>}}}''

The above is an example of nested conditionals. The outer ''if'' conditional is satifisfied when variable ''{{{$cupsOfCoffeeDrank}}}'' is equal to 2. But then after //that// condition is satisfied, one of two possible blocks of text is shown to the player, depending upon whether or not the player has visited passage {{{Remembrance}}} before. If she //has// been here before, then the {{{else}}} class of the inner ''{{{if}}}'' is [[triggered|TwineLesson010Passage022]].

<<tut-links "TwineLesson010Passage020" "TwineLesson010Passage022">>



:: TwineLesson010Passage022 [deonna]
And then, sure enough, when we return to {{{Campfire}}}, we read //The mossy knoll on which your campfire is located slopes gradually downhill to the frightful hollow you'll never set foot in again, leading to a copse of firs and evergreens.// $md and indeed, there is no longer a link to {{{SkeletonHollow}}}.

What frightening recollection could prove so traumatizing that the main character of our story avoids the hollow? Our {{{Campfire}}} passage code should now look like <a target="_new" href="https://gist.github.com/kyrathasoft/e70451b12f47da48880a3f1f40b63f20">this</a>; {{{SkeletonHollow}}} like <a target="_new" href="https://gist.github.com/kyrathasoft/cd5fc81ccee3531dcdf38b21fdf2cac3">this</a>; and {{{Remembrance}}} like <a target="_new" href="https://gist.github.com/kyrathasoft/6dda05c4be56d7a430992252d4f7be18">this</a>.

Let's [[$ct|TwineLesson010Passage023]]

<<tut-links "TwineLesson010Passage021" "TwineLesson010Passage023">>



:: TwineLesson010Passage023 [deonna]
<a target="_new" href="https://intfiction.org/u/greyelf/summary">GreyElf</a>, a very knowledgeable poster on intfiction.org <a target="_new" href="https://intfiction.org/t/does-state-turns-include-a-visit-to-storyinit/74571/9">provided</a> me a superior way to do testing starting from the {{{Remembrance}}} passage. As a result, the contents on the javascript section of our sample game have changed, as have the contents of {{{StoryInit}}}.

The easiest way to bring you copy of the sample game up-to-date is to download and extract <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImMh-rphifMBO88NBXg">this</a> HTML and import it back into Twine $md or get it <a target="_new" href=" http://twinery.42web.io/backups/CampfireTaleLesson010Passage023.zip">here</a> or <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLesson010Passage023.zip">here</a>.

{{{StoryInit}}} should now match <a target="_new" href="https://gist.github.com/kyrathasoft/b22b2b50de7729abffb214c1b50132b6">this</a>. The javascript section should now look like <a target="_new" href="https://gist.github.com/kyrathasoft/58c18a214325432ad5c26901e139344e">this</a>. And <a target="_new" href="https://gist.github.com/kyrathasoft/e0c05367cb42d85f131ad59e1e58d599">here</a> are the contents that need to go into new passage {{{TestingRemembrance}}} (which you'll need to create).  

Let's [[$ct|TwineLesson010Passage024]]

<<tut-links "TwineLesson010Passage022" "TwineLesson010Passage024">>



:: TwineLesson010Passage024 [deonna]
If you're interested in the details of the changes I've made $md with GreyElf's help $md to the start-at-psg-Remembrance code, I'll get into it later. For now, just know that this change decreases the likelihood of introducing bugs into our $sg. 

[[$ct|TwineLesson010Passage025]]

<<tut-links "TwineLesson010Passage023" "TwineLesson010Passage025">>



:: TwineLesson010Passage025 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs1012 + 'unwanted-space-in-remembrance.png'">Why is that unwanted vertical space between our placeholder text and the link, in passage {{{Remembrance}}}? Because of the multiline comment I've left in the passage. Here's how we'll fix that: give passage {{{Remembrance}}} the 'nobr' tag. Then, add a pair of line-break in the <a target="_new" href="https://gist.github.com/kyrathasoft/24181f8af1dea803276cf945d228c5d5">right</a> [[places|TwineLesson010Passage026]].

<<tut-links "TwineLesson010Passage024" "TwineLesson010Passage026">>



:: TwineLesson010Passage026 [deonna]
We're going to replace our PLACEHOLDER TEXT in passage {{{Remembrance}}}, and in so doing I'm going to show you how to reuse the same passage multiple times. 

Let's say that we've brainstormed and come up with three paragraphs that describe the ''Big Reveal'' regarding the main character's recollection of a past traumatic event here in the woods, in a hollow not far from the campfire. We could put all of it into the same passage, but some players don't like Walls-of-Text. Or, we could use a separate passage for each paragraph, but then we have to link the passages in the correct order, //and// our $tw storyboard would quickly fill up with passages. 

Trust me that when working in the $tw graphical editor, once you get beyond a few dozen passages it becomes a hairy mess trying to keep everything organized $md more on an alternative $tw-coding setup (using <a target="_new" href="https://code.visualstudio.com/">Visual Studio Code</a> and <a target="_new" href="https://www.motoslave.net/tweego/">Tweego</a>) a bit later in this tutorial [[series|TwineLesson010Passage027]].

<<tut-links "TwineLesson010Passage025" "TwineLesson010Passage027">>



:: TwineLesson010Passage027 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs1012 + 'self-referencing-remembrance.png'">I'm going to ask you to copy/paste the $ts from <a target="_new" href="https://gist.github.com/kyrathasoft/a06aa5529e53d8bdce1b0b0a197a0bfa">here</a> into your {{{Remembrance}}} passage. Once you do this, look at the storyboard area of the $tw editor, where the passages are visually depicted. You'll see that our {{{Remembrance}}} passage does indeed now loop back on itself. If you now launch the $sg, you'll be take to {{{Remembrance}}} $md 1st visit. Click the link to return to the same passage $md 2nd visit; and again for 3rd. After that, we return to {{{SkeletonHollow}}}.

We could just as easily use the same passage $md or //any// passage $md twenty times, or even [[ninety-nine|TwineLesson010Passage028]].

<<tut-links "TwineLesson010Passage026" "TwineLesson010Passage028">>



:: TwineLesson010Passage028 [deonna]
<img align="left" hspace=15 vspace=5 @src="setup.imgs1012 + 'multi-visit-switch.png'">Do you understand why the screenshotted code works? We're setting a temp variable $md ''_v'' to the number of times passage {{{Remembrance}}} has been visited. Then, our {{{<<switch>>}}} statement causes different text and link to be shown for each visit.

Let's now add our text for visit #1 to {{{Remembrance}}}: <a target="_new" href="https://gist.github.com/kyrathasoft/d4a6c5791c5e42380521ac3cd377930f">here</a> is what {{{Remembrance}}} should look like $md feel free to copy/paste. Once you've updated the passage, run our game again and test it. 

Did you test it? Interesting results, eh? Unless you have had previous experience with the $sc story format, or some other format with a similar macro, you've not likely seen what you're seeing here: multiple links in the same passage, each revealing additional [[text|TwineLesson010Passage029]].

<<tut-links "TwineLesson010Passage027" "TwineLesson010Passage029">>



:: TwineLesson010Passage029 [deonna]
Introducing the {{{<<linkreplace>>}}} macro. To understand how to use the link replacement macro, you may want to try the following $ts in passage {{{CodeTest}}}. If you //do// want to do that, you'll need to temporarily remove the "debug" tag from passage {{{TestingRemembrance}}} and then temporarily make {{{CodeTest}}} your startup passage: click Passage button, the highlight {{{CodeTest}}} passage, then click the "Start Story Here" button.

You see a shiny {{{<<linkreplace key.>>key, which you quickly transfer to your pocket.<</linkreplace>>}}}

You see a gold coin. {{{<<linkreplace "Take it.">>//Taken.//<<set $inventory.push("a gold coin")>><</linkreplace>>}}}

[[$ct|TwineLesson010Passage030]]

<<tut-links "TwineLesson010Passage028" "TwineLesson010Passage030">>



:: TwineLesson010Passage030 [deonna]
In case you didn't want to go the trouble of testing the above $ts in our sample game, you can try it out below. The first sentence's {{{<<linkreplace>>}}} works just fine, but the second will throw an error:

You see a shiny <<linkreplace key.>>key, which you quickly transfer to your pocket.<</linkreplace>>

You see a gold coin. <<linkreplace "Take it.">>//Taken.//<<set $inventory.push("a gold coin")>><</linkreplace>>

Why the error? Because in this twine in which I'm authoring the tutorial text, there isn't an array named {{{$inventory}}}.

If you do decide to test this code in the sample game, use the sidebar to look at your inventory after taking the gold coin. You'll see it now appears in your [[inventory|TwineLesson010Passage031]].

<<tut-links "TwineLesson010Passage029" "TwineLesson010Passage031">>



:: TwineLesson010Passage031 [deonna]
When we use the {{{<<linkreplace>>}}} macro, whatever argument we supply to the macro becomes a link $md a link that will be replaced when clicked. Below, I use the {{{<<linkreplace>>}}} macro to replace the numeral ''1'' with the word ''one''.

{{{<<linkreplace 1>>one<</linkreplace>>}}} yields ... click the link to find out: <<linkreplace 1>>one<</linkreplace>>

What if I want to be able to click on the word ''one'' to reveal the numeral ''2''? Well, for that we'd use a //nested// {{{<<linkreplace>>}}} macro:

{{{<<linkreplace 1>><<linkreplace one>>2<</linkreplace>><</linkreplace>>}}} Test this below:

<<linkreplace 1>><<linkreplace one>>2<</linkreplace>><</linkreplace>>

As you can imagine, nested {{{<<linkreplace>>}}} macros can get convoluted really [[quickly|TwineLesson010Passage032]].

    <<tut-links "TwineLesson010Passage030" "TwineLesson010Passage032">>



:: TwineLesson010Passage032 [deonna]
You may have noticed that we're using nested {{{<<linkreplace>>}}} macros in passage {{{Remembrance}}} see {{{<<<case 1>>>}}} under the {{{<<switch>>}}} statement. Something to be aware of: if you want more than a single word to serve as the link, you need to enclose the words in quotation marks.

{{{<<linkreplace "click here">>Tada!<</linkreplace>>}}}

Here's what happens if you fail to do this: even though I'm specifying two words ("click here"), because they're not enclosed in quotes, the link macro only linkifies the first word ("click"):

<<linkreplace click here>>Tada!

I still get the desired end-result ("Tada") but not the full two-word link I was [[going for|TwineLesson010Passage033]].<</linkreplace>>

<<tut-links "TwineLesson010Passage031" "TwineLesson010Passage033">>



:: TwineLesson010Passage033 [deonna]
<<set _inv to []>>You can use the {{{<<linkreplace>>}}} macro inline in the text of your story to do things such as take items and add them to your inventory. If you have {{{<<set $inv to []>>}}} then you might have the following line of $ts in your story:

{{{There is a shiny brass key here. <<linkreplace "Take it.">><<run $inv.pushUnique("shiny brass key")>>//Taken.//<</linkreplace>>}}} Try this below:

There is a shiny brass key here. <<linkreplace "Take it.">><<run _inv.pushUnique("a shiny brass key")>>//Taken.//

Your inventory now contains: ''<<= _inv>>''

Let's [[$ct|TwineLesson010Passage034]].<</linkreplace>>


:: TwineLesson010Passage034 [deonna]
I've read enough IF to know that what seems perfectly clear to the author may not always be clear to the reader. Therefore, let's make it a bit more explicit that what the reader is experiencing upon visiting {{{Remembrance}}} is a flashback, a memory. Modify the contents of passage {{{Remembrance}}} to <a target="_new" href="https://gist.github.com/kyrathasoft/9fffe5f62be283ad28a8581502e869cb">this</a> code listing. For the sake of symmetry, let's also make a modificaton to the beginning of the story. To do that, add a passage named {{{SatIn2024}}}, adding this to the passage: {{{<font color="lightgray">Saturday, 5/18/2024</font><br>}}}. Then, modify the contents of the {{{Campfire}}} passage to <a target="_new" href="https://gist.github.com/kyrathasoft/be3c5cf334fbaa443f7a7043566fab1d">this</a>. 

Now try the story again in your [[browser|TwineLesson010Passage035]].

<<tut-links "TwineLesson010Passage033" "TwineLesson010Passage035">>



:: TwineLesson010Passage035 [deonna]
Let's continue working on the text of passage {{{Remembrance}}}. Update the contents of that passage to <a target="_new" href="https://gist.github.com/kyrathasoft/444ca2ae0ceab5aef7e2f44e959160ca">this</a>. Now, when you test the game, you're able to click through multiple hyperlinks, each revealing more text, until you reach "3rd visit". We need to add text for the 3rd visit to {{{Remembrance}}}. <a target="_new" href=" http://twinery.42web.io/backups/CampfireTaleLess10Psg35OfTutorial.zip">Here</a> is a snapshot of the entire sample game we're creating, as it exists at the time I'm writing this page in the tutorial. It can also be downloaded <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLess10Psg35OfTutorial.zip">here</a>. If you download it, import it into desktop [[Twine|TwineLesson010Passage036]].

<<tut-links "TwineLesson010Passage034" "TwineLesson010Passage036">>



:: TwineLesson010Passage036 [deonna]
Let's update passage {{{Remembrance}}} just a bit more, so that it contains <a target="_new" href="https://gist.github.com/kyrathasoft/d4300286124cdf379da8e6098a29d917">this</a> $ts. Add a new passage, {{{TheCreature}}} and paste <a target="_new" href="https://gist.github.com/kyrathasoft/ff70fd4af9a9a348666523b655a9faa9">this</a> into it. Next, update passage {{{TestingRemembrance}}} to <a target="_new" href="https://gist.github.com/kyrathasoft/178efd46f54d0be444a85c53e39a49fe">this</a> listing, and then remove the 'Debug' tag from the passage.

Now, create passage {{{TestingTheCreature}}} and paste <a target="_new" href="https://gist.github.com/kyrathasoft/83916874b2f6de62aea7d9eceb0d3d3b">this</a> $ts into it. Add the tag 'Debug' (sans the single quotes) to {{{TestingTheCreature}}}. If you followed these steps carefully, then when you next test the game in your browser, the $sg should start at passage {{{TheCreature}}} with the words //You see it! There, maybe sixty [[feet away|TwineLesson010Passage037]].//

<<tut-links "TwineLesson010Passage035" "TwineLesson010Passage037">>



:: TwineLesson010Passage037 [deonna]
Perhaps you noticed that I've added a flashlight and a .357 magnum revolver to the MC's inventory (not in terms of code, but by writing them into the narrative). Let's update our inventory array to reflect that: go to special passage {{{StoryInit}}} and updating the line of $ts that sets the inventory contents:

{{{<<set $inventory to ['a canteen', 'a pocket knife', 'a handkerchief', 'a flashlight', 'a revolver']>>}}} Then, in passage {{{YourInventory}}}, we can comment-out that final line of $ts. By only commenting it out rather than deleting it, we can easily use it again in the future if needed. The contents of {{{YourInventory}}} should now mirror <a target="_new" href="https://gist.github.com/kyrathasoft/96f74217af8a0f580993bded0d7305bd">this</a> code [[listing|TwineLesson010Passage038]].

<<tut-links "TwineLesson010Passage036" "TwineLesson010Passage038">>



:: TwineLesson010Passage038 [deonna]
<img @src="setup.imgs1012 + 'passages19inv5.png'">
Ensure that passage {{{TheCreature}}} has been assigned a {{{nobr}}} tag. Launch the game in your browser to test it and then click the {{{CHKVARS}}} sidebar button. You should show five inventory items. Now, we're going to update our {{{TheCreature}}} passage to <a target="_new" href="https://gist.github.com/kyrathasoft/e5c2c19c24be391729fd16dfdac19b65">this</a> listing. Admittedly, it's a bit convoluted, with one outer and eight nested {{{<<linkreplace>>}}} macros. 

The updated code-listing for passage {{{TheCreature}}} will cause desktop Twine to create a new passage named {{{CreatureDown}}}. You should add this sentence to that new passage, and then test the game by running it in your browser: {{{The scent of gunpowder and the coppery tang of blood ride the night air.}}}  

Let's [[$ct|TwineLesson010Passage039]]

<<tut-links "TwineLesson010Passage037" "TwineLesson010Passage039">>



:: TwineLesson010Passage039 [deonna]
<img @src="setup.imgs1012 + 'boom-boom.png'"><br>Did you test the game? The main character (i.e., MC) has fired his revolver twice. Wonder if we hit anything? Notice the indentation shown in the screenshot. And you know from the previous page that to accomplish that, we used {{{<span>}}} tags of class 'doubletab' and 'tripletab'. <a target="_new" href="https://gist.github.com/kyrathasoft/af5d1e84c12ab55478c02eb7390aa81f">Here</a> is what you'll need in the story stylesheet. If you don't like the indentation, just go into passage {{{TheCreature}}} and remove the spans. You might want to do this if you want to play the game on a small screen, such as a [[phone|TwineLesson010Passage040]].

<<tut-links "TwineLesson010Passage038" "TwineLesson010Passage040">>



:: TwineLesson010Passage040 [deonna]
Now we turn our attention to passage {{{CreatureDown}}}. Update it's text to the following: {{{The scent of gunpowder and the coppery tang of blood ride the night air. You have widened your stance still further, dropping into a squat, back to the elm tree.}}}

What I want to do now is provide multiple choices to the player, and I want to do it using an invisible table that centers the multiple choices. And since I can imagine using such a tool repeatedly, let's create a {{{widget}}} that can take an even number of arguments: 2, 4, 6, or 8. The arguments should come in pairs of one {{{string}}} representing the text to become a clickable link and the other representing the name of a passage to go-to upon clicking that [[link|TwineLesson010Passage041]].

<<tut-links "TwineLesson010Passage039" "TwineLesson010Passage041">>



:: TwineLesson010Passage041 [deonna]
Here's how <a target="_new" href="https://gist.github.com/kyrathasoft/3d3871d6926ebea796cc2e1d557392f0">the widget</a> works: we should always pass it an even number of arguments, since we want pairs representing link-text and passage destination. Therefore, the widget performs tests to ensure (a) that there actually //are// arguments passed, and (b) that an //even// number of arguments are passed. If either of those tests fail, the widget won't attempt to process any arguments. Furthermore, even if conditions (a) and (b) above are met, the widget will also abort if (c) any link test is less than a minimum of 2-characters in length and (d) if any passage names passed in as arguments fail to correspond to an already-existing passage in our [[game|TwineLesson010Passage042]].

<<tut-links "TwineLesson010Passage040" "TwineLesson010Passage042">>



:: TwineLesson010Passage042 [deonna]
And <a target="_new" href="https://gist.github.com/kyrathasoft/39010e61f7302d504d8d7ad8e23c8c55">here</a> is a gist of just the {{{<<TableOfChoices>>}}} widget. You'll notice I've included plenty of whitespace to make it more readable. If you don't have any programming background, you may not be able to appreciate the utility of this widget. As you can see, including whitespace, the widget is about 100 lines of code. That's about 3.45 Kb of code. It would be far too onerous to have to write that code each and every time we want to present 2 to 4 choices for the player. By putting it in a widget, we leverage //code reusability//. To fully grok this code requires that you understand arrays and condiitionals. If your eyes cross when looking at it, that's okay. You can make use of it without fully [[understanding|TwineLesson010Passage043]].

<<tut-links "TwineLesson010Passage041" "TwineLesson010Passage043">>



:: TwineLesson010Passage043 [deonna]
Well, we have advanced our story a bit in this lesson, learned about pushing only unique values to arrays, learned how to concatenate two arrays, and developed a fairly significant widget that we can now leverage elsewhere in our game. Let's move on and see where Lesson 11 [[takes us|TwineLesson011Passage001]].

<<tut-links "TwineLesson010Passage042" "TwineLesson011Passage001">>



/* End of Lesson 10, Beginning of Lesson 11 */

:: TwineLesson011Passage001 [deonna]
<h2>$tw & $sc <span class="pulse">Lesson # 11</span> $md The Creature Is Down!</h2>
Welcome to Lesson 11! Near the end of the previous lesson we achieved two milestones: (1) our first sizeable (and, arguably, truly useful) widget and (2) our first real decision-point. Before we continue further, I've <a target="_new" href="https://gist.github.com/kyrathasoft/39010e61f7302d504d8d7ad8e23c8c55">updated</a> the {{{<<TableOfChoices>>}}} widget, so please make sure you update it too, if you're creating the sample game alongside this tutorial. This widget is a bit longer, but the extra code spotlights specific errors if the widget is called with one or more invalid [[arguments|TwineLesson011Passage002]].

<<tut-links "TwineLesson010Passage043" "TwineLesson011Passage002">>



:: TwineLesson011Passage002 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'test-widget-error-msg.png'">Let's test our new and improved widget by intentionally passing it the name of a passage (the sixth argument) that doesn't yet exist because we've not created the passage yet. Add the following beneath passage {{{CreatureDown}}}'s text description:


{{{<<TableOfChoices 
	"Turn on flashlight" "ShineFlashlight" 
    "Reload" "RevolverReload" 
    "Remain Silent" "RemainSilent">>}}}

Now run the game in your browser and note the complaint that our {{{<<TableOfChoices>>}}} widget gives us (see the screen shot on this page). Helpful, but could we improve it further? Yes, by having it tell us the {{{name}}} of the non-existent [[passage|TwineLesson011Passage003]].

<<tut-links "TwineLesson011Passage001" "TwineLesson011Passage003">>


:: TwineLesson011Passage003 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'improved-error-msg.png'">>Let's <a target="_new" href="https://gist.github.com/kyrathasoft/2d7171d68f1e8d3d0be85241ec6de98d">create</a> a widget to turn text orange, and then update our {{{<<TableOfChoices>>}}} widget to use orange text in order to highlight important error info. <a target="_new" href="https://gist.github.com/kyrathasoft/993f470a32eef6025fcc0076b2357e78">Here</a> is the updated {{{<<TableOfChoices>>}}} widget. After updating our widget, running the game in our browser should now produce the error message displayed on this page as a screen [[shot|TwineLesson011Passage004]].

<<tut-links "TwineLesson011Passage002" "TwineLesson011Passage004">>



:: TwineLesson011Passage004 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'actual-table-of-choices.png'">Go ahead and create passage {{{RemainSilent}}} and add this text to it: {{{Perhaps that is wise: remain perfectly still and as silent as possible. Did you hit the creature with your shots? You try to increase the keenness of your hearing through sheer willpower.}}} Then, run the game to see the power of our {{{<<TableOfChoices>>}}} widget in action. I should note that in order for widget {{{<<orangetext>>}}} to function as intended, you need to add the following function to the javascript section of our $sg:
<font size=-1>''
{{{setup.Trimmed = function(name){}}}
  	<span class="tab">return name.trimEnd();</span>
};''</font>

Let's [[$ctl|TwineLesson011Passage005]].

<<tut-links "TwineLesson011Passage003" "TwineLesson011Passage005">>



:: TwineLesson011Passage005 [deonna]
Just to demonstrate that $md as advertised $md our {{{<<TableOfChoices>>}}} can indeed handle four pairs of link-text/passage-names, temporarily change the passage {{{CreatureDown}}} so that the widget call looks like this:
''<font size=-1>
{{{<<TableOfChoices}}}
<span class="tab">{{{"Turn on flashlight" "ShineFlashlight"}}}</span>
<span class="tab">{{{"Reload" "RevolverReload"}}}</span>
<span class="tab">{{{"Remain Silent" "RemainSilent"}}}</span>
<span class="tab">{{{"Return to Campfire" "Campfire">>}}}</span>
</font>''
Run the game. Sure enough, it gives us a link (as the 4th choice) that allows us to return to the {{{Campfire}}} passage. Let's add a fifth link/passage-name [[combo|TwineLesson011Passage006]].

<<tut-links "TwineLesson011Passage004" "TwineLesson011Passage006">>



:: TwineLesson011Passage006 [deonna]
<img @src="setup.imgs1012 + 'fifth-link-psg-pair.png'"><br>Even when we add a fifth link/psg pair, our widget still only creates four links $md because that's how we programmed it. We could add capacity for a fifth or even sixth hyperlink, but I think four is adequate. We could also add some code so that our widget would give an error message if passed more than eight parameters (four link/psg-name pairs) $md but, again, probably not necessary. For our purposes in passage {{{CreatureDown}}}, let's leave it at three hyperlinks (i.e., six arguments passed into the widget).

[[$ct|TwineLesson011Passage007]]

<<tut-links "TwineLesson011Passage005" "TwineLesson011Passage007">>



:: TwineLesson011Passage007 [deonna]
(Un?)fortunately, you're now going to have to suffer through me writing about ''choices'' and their importance in interactive fiction. Interactive fiction thrives on the player's sense of ''agency'' and control over the narrative. When choices have tangible consequences, whether they lead to different outcomes, unlock new paths, or alter the player's relationship with characters, the player feels more invested in the [[story|TwineLesson011Passage008]].

<<tut-links "TwineLesson011Passage006" "TwineLesson011Passage008">>


:: TwineLesson011Passage008 [deonna]
The illusion of choice, where choices appear to matter but ultimately don't affect the story's trajectory, can be frustrating for players $md //if// players perceive the illusion. It can erode the player's trust in the author and diminish their engagement with the <<linkreplace narrative.>>narrative.

While some level of illusion might be necessary to maintain narrative flow or create specific emotional effects, it's crucial to balance it with ''meaningful'' choices that provide a sense of ''agency'' and [[impact|TwineLesson011Passage009]].

<<tut-links "TwineLesson011Passage007" "TwineLesson011Passage009">><</linkreplace>> 



:: TwineLesson011Passage009 [deonna]
The trick is to balance things, to give enough choices with substantive effects that non-substantive choices become acceptable as flavoring. One generally agreed-upon principle in much of interactive fiction is that the player should not be killed out of hand. There should be some foreshadowing of dangerous outcomes waiting in the wings. However, opinions vary. Some players are okay with death and are eager to try another play-through, while others aren't okay with this. There is even a game //cruelty// <a target="_new" href="https://www.ifwiki.org/Cruelty_scale#:~:text=The%20distinctions%20between%20Tough%2C%20Nasty,are%20only%20obvious%20to%20some.">scale</a> for such [[games|TwineLesson011Passage010]].

<<tut-links "TwineLesson011Passage008" "TwineLesson011Passage010">>



:: TwineLesson011Passage010 [deonna]
This sample game we're making is not going to win any awards or go down in the annals of interactive-fiction greatness. It's more or less a learning project. And because of this, it won't be super-long. Certainly not long and involved enough to merit implementation of various player stats. But this has its perks: we aren't going to have to track dozens of variables, and we don't have to code any elaborate puzzles. And we won't be writing 150,000 words so that each of three main storylines is novella-length. I guess that I've taken the trouble to explain this so that you are reminded that I'm not holding this up as a stellar example. You can, should, and hopefully will far outstrip this game with your own future [[efforts|TwineLesson011Passage011]].

<<tut-links "TwineLesson011Passage009" "TwineLesson011Passage011">>


:: TwineLesson011Passage011 [deonna]
In order to get rid of the unsightly broken-link that shows on the Twine storymap, let's replace the back link's brackets notation with link macro notation. This is at the bottom of passage {{{PsgChkVars}}}:

Replace {{{[[back->$return]]}}} with {{{<<link back>><<goto $return>><</link>>}}}. Test it out. The functionality is unchanged, but our storymap is prettier.

If you want to ensure you're using the exact same code (i.e., $ts) that I'm using, <a target="_new" href="https://1drv.ms/u/s!AmCkA_L-M0FImM9O9PkLricsXKnfPA">here</a> is a zip archive of the exported sample story, $tut_tit. I also backed up a copy <a target="_new" href="https://bryanmiller.us/twinery/backups/CampfireTaleLess11Psg11.zip">here</a> and <a target="_new" href="http://twinery.42web.io/backups/CampfireTaleLess11Psg11.zip ">here</a>.

Okay, let's extend our story by coding the $sg's responses to the choices presented to the player in passage {{{CreatureDown}}}. [[$ct|TwineLesson011Passage012]].

<<tut-links "TwineLesson011Passage010" "TwineLesson011Passage012">>



:: TwineLesson011Passage012 [deonna]
Realistically, shining the flashlight is probably //the// most logical choice. Now that the main character has fired off two rounds from his .357 revolver, if the alien //didn't// know exactly where he was before, it does //now.// $md or //does// it? We're assuming it has the sense of hearing. 

We've hinted that perhaps the MC has some military or law enforcement training in his history. On the next page we'll make a modification, and then we're going to evaluate these choices and try to assess how players would likely view them. 

[[$ct|TwineLesson011Passage013]]

<<tut-links "TwineLesson011Passage011" "TwineLesson011Passage013">>


:: TwineLesson011Passage013 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'three-choices.png'">Modify passage {{{CreatureDown}}} to the following: ''The scent of gunpowder and the coppery tang of blood ride the night air. You have widened your stance still further, dropping into a squat, back to the elm tree.'' 

{{{<<TableOfChoices 
	"Draw Your Knife" "DrawKnife" 
    "Reload Your Revolver" "RevolverReload" 
    "Shine Your Flashlight" "ShineFlashlight">>}}}

Let's rename passage {{{RemainSilent}}} to {{{DrawKnife}}}.  Let's [[$ctl|TwineLesson011Passage014]]

<<tut-links "TwineLesson011Passage012" "TwineLesson011Passage014">>




:: TwineLesson011Passage014 [deonna]
Why did we rename passage {{{RemainSilent}}}? Glad you asked. Any sensible character, having just been rushed by an alien and not sure if your bullets hit it or missed it, is going to be as silent as possible, so as not to draw a target on oneself. We don't want to offer meaningless choices or suboptimal choices that clearly //are// suboptimal.

After renaming passage {{{RemainSilent}}} to {{{DrawKnife}}}, add this text to the passage: ''Revolver still gripped in your right hand, you reach with your left and draw your K-BAR from its sheath, straining your vision into the inky night, trying to discern a slightly phosphorescent humanoid profile, either erect or lying in a pool of alien blood.''

Let's [[$ctl|TwineLesson011Passage015]]

<<tut-links "TwineLesson011Passage013" "TwineLesson011Passage015">>



:: TwineLesson011Passage015 [deonna]
Each of those three choices $md 'draw your knife', 'reload your revolver', 'shine your flashlight' $md make at least a modicum of sense, right? In my mind, flicking on the flashlight is the brightest idea (no pun intended), as that will allow you (hopefully) to see if you hit the alien and/or if it's still nearby and a threat (alive) or not (dead). We could draw the knife, but how good are most people at stabbing things in the dark? And it's not as if we can stab the alien simultaneously with firing the revolver. We could also replace the two spent bullets in the revolver, but a .357 has six shots, so you've still got four remaining.

Okay, then, let's code the {{{ShineFlashlight}}} passage first. To prepare for the contents of this passage, we first need to make a couple modifications in our {{{StoryInit}}} [[passage|TwineLesson011Passage016]].

<<tut-links "TwineLesson011Passage014" "TwineLesson011Passage016">>




:: TwineLesson011Passage016 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'story-details-ifid.png'">On the very first line of passage {{{StoryInit}}}, even before we run the check for test cases with {{{<<run setup.runTestCase()>>}}}, add this line: {{{State.prng.init("4D29B454-6E56-42E7-8925-33589D81EA59", true)}}} $md but, you can modify the long string to use whatever IF-ID Twine has assigned your version of the tutorial game. To find that data, use menu items {{{Story}}}, then {{{Details}}}.

[[$ct|TwineLesson011Passage017]].

<<tut-links "TwineLesson011Passage015" "TwineLesson011Passage017">>




:: TwineLesson011Passage017 [deonna]
{{{State.prng.init( )}}} is a function call that will help $tw generate the random results we'll need in passage {{{ShineFlashlight}}}. We also want to set a new variable in passages {{{StoryInit, TestRemembrance, TestTheCreature, }}}and {{{TestCreatureDown}}}. Here is the variable setter to add to those passages: {{{<<set $alien to "none">>}}}

This variable signifies that the player hasn't encountered the alien yet at the default starting place of the game (or, in the case of our Test passages, wherever we choose to start the game). In passage {{{ShineFlashlight}}}, we'll wind up changing the value of variable {{{$alien}}} to one of the following: "killed", "winged", or "missed".

Once you've made those changes, let's [[$ctl|TwineLesson011Passage018]].

<<tut-links "TwineLesson011Passage016" "TwineLesson011Passage018">>


:: TwineLesson011Passage018 [deonna]
<a target="_new" href="https://gist.github.com/kyrathasoft/f995336ee5c9226e1215afca5a16738a">Here</a> is the $ts that should be pasted into passage {{{ShineFlashlight}}}. Again, I'm using my passage re-use trick. At the very top of passage {{{ShineFlashlight}}}, I set a temp variable, {{{_v}}} to the value of function {{{visited()}}}. When we call function {{{visited()}}} without passing the name of a passage as an argument, $sc presumes we're referencing the //current// passage.

So, the first line of $ts sets a temp variable equal to the number of times passage {{{ShineFlashlight}}} has been visited, i.e., to the value ''1''. With me so far? [[Good|TwineLesson011Passage019]].

<<tut-links "TwineLesson011Passage017" "TwineLesson011Passage019">>



:: TwineLesson011Passage019 [deonna]
The second line of $ts in {{{ShineFlashlight}}} is {{{<<switch _v>>}}}. This tells $sc, "Examine the value currently held in temp variable {{{_v}}}, and then we'll do various things based on what that value //is// currently..."

If that value is ''1'', then we just arrived in passage {{{ShineFlashlight}}} because the player opted for choice #3 in passage {{{CreatureDown}}}.  That being the case, we set story variable {{{$flashlightOn}}} to true, will provide accompanying descriptive text for the player to read, and will turn the last word in that descriptive text into a hyperlink that $md when clicked $md brings the player back to {{{ShineFlashlight}}} for visit #2. And of course //that// triggers everything under {{{<<case 2>>}}} to [[happen|TwineLesson011Passage020]].

<<tut-links "TwineLesson011Passage018" "TwineLesson011Passage020">>



:: TwineLesson011Passage020 [deonna]
Look under {{{<<case 2>>}}} in the outermost {{{<<switch>>}}} in passage {{{ShineFlashlight}}}. Obviously, this code will be run on the 2nd visit to the passage. Notice the comment at the very beginning of {{{<<case 2>>}}}: 

//{{{/* Let's say there's a 20% chance you hit the alien and killed it, a 40% chance you winged it, and a 40% you missed entirely: shame on you! You should practice more... */ }}}//

Remember, anything we put in between the ''{{{/*}}}'' and the ''{{{*/}}}'' symbols form a comment that is ignored by $sc and $tw when compiling our game to an HTML file. The comment explains what the $ts in the outer {{{<<switch>>}}}'s {{{<<case 2>>}}} will [[accomplish|TwineLesson011Passage021]].

<<tut-links "TwineLesson011Passage019" "TwineLesson021Passage021">>



:: TwineLesson011Passage021 [deonna]
Now it's time to learn about the {{{random()}}} function. Here is the critical line of $ts:

{{{<<set _chance to random(1,10)>>/*You rolled a <<= _chance>><br>*/}}}

Can you identify what portion of the above line of code in a <<linkreplace comment?>>

If you identified the following segment as a comment, you're correct!

{{{/*You rolled a <<= _chance>><br>*/}}}

On the next page, I'll show you an optional way to test this code. Let's [[$ctl|TwineLesson011Passage022]].

<<tut-links "TwineLesson011Passage020" "TwineLesson011Passage022">>
<</linkreplace>>



:: TwineLesson011Passage022 [deonna]
To test {{{<<set _chance to random(1,10)>>}}}, temporarily include the following code after {{{<<case 1>>}}} and before the line that sets {{{$flashlightOn}}} to true in passage {{{ShineFlashlight}}}:
''<font size=-1>
{{{<br>}}}
{{{<<for _i range 1, 5>>}}}
    <span class="tab">{{{<<set _chance to random(1,10)>>Next result: <<= _chance>><br>}}}</span>
{{{<</for>>}}}
{{{<br>}}}</font>''

Let's [[$ctl|TwineLesson011Passage023]]

<<tut-links "TwineLesson011Passage021" "TwineLesson011Passage023">>



:: TwineLesson011Passage023 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'next-result.png'">Here are the results I got with the test code, upon running the game in-browser and after two restarts and returning to passage {{{ShineFlashlight}}}. The best pseudo-random numbers that $tw (or any other computer program) can generate. And this test is sufficient to demonstrate that we're able to get a random integer result between 1 and 10, inclusive. You can now remove the segment of test code from passage {{{ShineFlashlight}}}, returning it to <a target="_new" href="https://gist.github.com/kyrathasoft/f995336ee5c9226e1215afca5a16738a">this</a> status.

Let's [[$ctl|TwineLesson011Passage024]].

<<tut-links "TwineLesson011Passage022" "TwineLesson011Passage024">>



:: TwineLesson011Passage024 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'bad-eval.png'">Upon testing the game now, and choosing the third option, 'Shine Flashlight', I encounter a runtime error. There may be one or two extraneous right-parentheses, perhaps after "killed" and "winged". Remove those and everything should work fine. If you encounter this error, just copy/paste the code from <a target="_new" href="https://gist.github.com/kyrathasoft/f995336ee5c9226e1215afca5a16738a">here</a> into passage {{{ShineFlashlight}}}.

Let's [[$ctl|TwineLesson011Passage025]].

<<tut-links "TwineLesson011Passage023" "TwineLesson011Passage025">>



:: TwineLesson011Passage025 [deonna]
Now it's time to look at and be sure that we //grok// the inner {{{<<switch>>}}} of passage {{{ShineFlashlight}}}. It's important to understand that all the $ts that lies between {{{<<case 2>>}}} and {{{<<default>>}}} of the outer {{{<<switch>>}}} is one block of code. Essentially, here's what's happening in ''case 2'': (a) generate a random integer between 1 and 10, inclusive; (b) use that result with the inner {{{<<switch>>}}} to determine what text to show next to the player. 

The structure will look like this:
''<font size=-1>
{{{<<switch _chance>>}}}
{{{<<case 1 2>>}}}
<span class="tab">do some stuff...</span>
{{{<<case 3 4 5 6>>}}}
<span class="tab">do some other stuff...</span>
{{{<<default>>}}}
<span class="tab">stuff to do if {{{_chance}}} equals 7, 8, 9, or 10</span>
{{{<</switch>>}}}
</font>''

Notice that with a {{{<<switch>>}}} statement, {{{<<default>>}}} handles //anything// that the preceding {{{<<case>>}}}s didn't [[handle|TwineLesson011Passage026]].

<<tut-links "TwineLesson011Passage024" "TwineLesson011Passage026">>



:: TwineLesson011Passage026 [deonna]
Notice that we can put multiple ''cases'' in a particular {{{<<case>>}}}. For instance, {{{<<case 1 2>>}}} means //if the temp variable {{{_chance}}} has a value of 1, or 2 (which it will exactly 20% of the time), do the following...//

Given that insight, can you discern what the following line of code does?

{{{<<case 3 4 5 6>>}}}

Right! It handles the cases in which {{{_chance}}} holds a value of 3, 4, 5, or 6. You have to be careful to include a space between the values. If we had made a typo and that case statement read like this $md {{{<<case 3 45 6>>}}} $md then if {{{_chance}}} was equal to 4 or 5, instead of doing what we want the code to do, it would instead do what's under {{{<<default>>}}}.

Let's [[$ctl|TwineLesson011Passage027]]

<<tut-links "TwineLesson011Passage025" "TwineLesson011Passage027">>


:: TwineLesson011Passage027 [deonna]
Somehow in zigging between passage {{{ShineFlashlight}}} and {{{PsgChkVars}}}, I actually //did// trigger the {{{<<default>>}}} of the //outer// {{{<<switch>>}}}, so I'm replacing it with this $ts:

{{{<<default>>}}}
	{{{/* We shouldn't get this result, but if we do...*/}}}
    {{{<<set $alien to "killed">>}}}It appears that you killed the alien. At least, you're fairly certain you did. Playing the bright beam of your halogen flashlight over its white-gray chitinous exoskeleton, you approach cautiously, wrists crossed police-fashion so that both flashlight and gun are aimed at the supine {{{<<link form>><<goto AfterFlashlight>><</link>>}}}.

That'll put that edge-case to [[rest|TwineLesson011Passage028]].

<<tut-links "TwineLesson011Passage026" "TwineLesson011Passage028">>



:: TwineLesson011Passage028 [deonna]
So, <a target="_new" href="https://gist.github.com/kyrathasoft/9c298baab6edf228a4e7fd16135309e6">here</a> is the updated code-listing for passage {{{ShineFlashlight}}}. Notice that, since I want the 'killed the alien' description to be available in two different places (under both {{{<<case 2>>}}} and {{{<<default>>}}} of the outer {{{<<switch>>}}}), I set a temp variable, {{{_descKilled}}} to hold that description. Code re-use! And, it saves characters, helping to minimize the compiled HTML file size.

No matter which of the three outcomes (killed, winged, missed the alien) we get in passage {{{ShineFlashlight}}}, after the second visit to that passage we're going to be linked to passage {{{AfterFlashlight}}}. We'll see the utility of story variable {{{$alien}}} in that [[passage|TwineLesson011Passage029]].

<<tut-links "TwineLesson011Passage027" "TwineLesson011Passage029">>



:: TwineLesson011Passage029 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'story-map-less11-psg29.png'">Rename passage {{{AfterFlashlight}}} to {{{PostAlien}}}. Why? Because I said so. Just kidding $md that sounded like my dad. I've decided to rename the passage and let it's contents reflect the encounter the main character has just had with what seemed to be an alien. You can see on this page's screenshot how I have chosen to arrange a subset of passages in the $tw storymap. 

You'll also need to replace four instances of the string "AfterFlashlight" in passage {{{ShineFlashlight}}} with "PostAlien".

By this passage arrangement, I've tried to convey that the Eureka moment of returning memory (after two cups of coffee) leads to a flashback in which you recall encountering an alien creature. That encounter leads to gunfire, followed by your first real choice (reload, draw knife, shine flashlight $md represented by passages {{{RevolverReload, DrawKnife,}}} and {{{ShineFlashlight}}}, respectively).

Even though our twine only has 25 passages, it's already beginning to be obvious that working in the twine graphical editor can become a hairy mess when stories attain even moderate size. This is why I'm coding the actual tutorial (that references our $tut_tit $sg) in Visual Studio Code, using the Twee3 [[format|TwineLesson011Passage030]].

<<tut-links "TwineLesson011Passage028" "TwineLesson011Passage030">>



:: TwineLesson011Passage030 [deonna]
<img align="right" hspace=10 vspace=5 @src="setup.imgs1012 + 'story-map-less11-psg29.png'">I didn't want to start you off in VSCode and Twee3 because it can seem daunting to the uninitiated, and because the Twine desktop program does offer some advantages, including watching variables, debug views, and it can help you visualize the connection bewteen passages.

You may also have noticed that sometimes $tw shows connecting arrows between passsages, sometimes not. It will draw these arrows if we use standard link notation but not if we use the link macro. I'll show you why this is problematic from the point of view of using the story-map as a storyboard accurately representing the flow from passage to [[passage|TwineLesson011Passage031]].

<<tut-links "TwineLesson011Passage029" "TwineLesson011Passage031">>



:: TwineLesson011Passage031 [deonna]
This is one of the functions in the javascript section of our story (if for whatever reason you don't find it there, copy/paste from here in order to add it).

''<font size=-1>setup.getTotalPassagesCount = function() {
	<span class="tab">return $('tw-passagedata').length;</span>
};</font>''

If you drop this line of code into passage {{{CreatureDown}}} or {{{PostAlien}}}, and then play the story to that point, it should tell you that there are twenty-five passages in this twine work:

{{{Passages: <<= setup.getTotalPassagesCount()>>}}}

However, if you click menu item {{{Story}}} and then {{{Details}}}, $tw will tell you that there are only 9 links. That's because $tw doesn't count links created using the {{{<<link>>}}} macro. Perhaps a future version of $tw will break links down in Details into the various types of [[links|TwineLesson011Passage032]].

<<tut-links "TwineLesson011Passage030" "TwineLesson011Passage032">>



:: TwineLesson011Passage032 [deonna]
<img align="left" hspace=10 vspace=5 @src="setup.imgs1012 + 'plumbing-psgs.png'">So, how do we use the story-map to best effect in keeping our growing work of $tw organized? I'm sure different people do it in different ways. I do it by organizing passages into clusters, and by taking advantage of passage color-coding. For instance, in the current $tw sample-game, I have certain passages tagged 'plumbing' and colored yellow. Also the current debug-tagged test passage is colored red.

Honestly, it wouldn't be a bad idea to keep one passage for nothing other than to keep notes in it. It wouldn't have any direct bearing on the game, but would, rather, be a meta-document for programmer [[notes|TwineLesson011Passage033]].

<<tut-links "TwineLesson011Passage031" "TwineLesson011Passage033">>



:: TwineLesson011Passage033 [deonna]
Even though we will need to go back and flesh out {{{RevolverReload}}} and {{{DrawKnife}}}, for now let's stick with having advanced the story by passing through {{{ShineFlashlight}}}. Give passage {{{PostAlien}}} a {{{nobr}}} tag, and then add <a target="_new" href="https://gist.github.com/kyrathasoft/1f9cb7e3310733944a9cf32c801437b5">this</a> code into the passage.

<a target="_new" href="https://gist.github.com/kyrathasoft/6a1f895ef60adff886fd7ecff5388a68">Here's</a> a version of passage {{{PostAlien}}}'s contents you can use to update that passage. Then, test by playing through {{{ShineFlashlight}}} to test {{{<<switch $alien>>}}} in passage {{{PostAlien}}}.

Let's [[$ctl|TwineLesson011Passage034]]

<<tut-links "TwineLesson011Passage032" "TwineLesson011Passage034">>



:: TwineLesson011Passage034 [deonna]
<<tutorial-passages>>

