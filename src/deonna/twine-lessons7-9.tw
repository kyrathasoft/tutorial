:: TwineLesson007Passage001 [deonna]
<h2>$tw & $sc <span class="pulse">Lesson # 7</span> $md Our First Function, Strings, & The Setup Object</h2>
Welcome to Lesson 7:
<ul><li>improve the ''{{{YourBackpack}}}'' passage $ts</li>
<li>learn how to assign values to variables</li>
<li>learn about story versus temp variables</li>
<li>learn about the {{{setup}}} object and its use</li>
<li>learn about //strings//</li>
<li>learn about functions</li></ul>
All of the above is in preparation for developing an inventory system and just generally increasing your knowledge.

[[$ct|TwineLesson007Passage002]]

<<tut-links "TwineLesson006Passage027" "TwineLesson007Passage002">>



:: TwineLesson007Passage002 [deonna]
If you launch our $sg $md $tut_tit $md and go into your tent and then into your backpack, you see this, and it's crystal clear that there are two packets of instant coffee available:

<img src="./assets/images/tut-less-7-9/remaining-coffee.png">

If we click the link "take a packet of Mount Hagen", the $sg just immediately returns us to the tent [[passage|TwineLesson007Passage003]].

<<tut-links "TwineLesson007Passage001" "TwineLesson007Passage003">>



:: TwineLesson007Passage003 [deonna]
If we go back into ''{{{YourBackpack}}}'', now we see that instead of two packets, there is only one packet remaining:

<img src="./assets/images/tut-less-7-9/single-packet-remains.png">

Do it one more time and you get this:

<img src="./assets/images/tut-less-7-9/out-of-coffee.png">

It's functional, but clunky. Let's fix [[that|TwineLesson007Passage004]].

<<tut-links "TwineLesson007Passage002" "TwineLesson007Passage004">>



:: TwineLesson007Passage004 [deonna]
Something important to know: When you alter the value of variables, $sc doesn't update the value held in the variables until a passage transition takes place. We're going to make a small addition to the $ts in passage ''{{{YourBackpack}}}''. I have shown the additional $ts in bold below:

{{{<<if $instantCoffeePackets>> >> <<link "take a packet of Mount Hagen">><<set $instantCoffeePackets -- >>}}}''{{{<<goto YourBackpack>>}}}''{{{<<goto YourBackpack>><</link>><</if>> >> [[set backpack aside|YourTent]]}}}

Let's edit the passage in the $tw [[editor|TwineLesson007Passage005]].

<<tut-links "TwineLesson007Passage003" "TwineLesson007Passage005">>



:: TwineLesson007Passage005 [deonna]

Make the change by adding ''{{{<<goto YourBackpack>>}}}'' (in the place shown above) to your ''{{{YourBackpack}}}'' passage:

<img src="./assets/images/tut-less-7-9/modify-yourbackpack-psg.png">

After making this small change, re-launch $tut_tit, go to your tent, get your backpack, and take the coffee packets. This implementation is better, because the player no longer has to click a link to see the updated number of instant coffee packets.

When no packets have been taken, or only one has been taken, the "Take a packet of Mount Hagen" link remains available. But when both packets have been taken from your backpack, the only thing left to do is click the "set backpack aside" [[link|TwineLesson007Passage006]].

<<tut-links "TwineLesson007Passage004" "TwineLesson007Passage006">>


:: TwineLesson007Passage006 [deonna]

Now we have a decision to make. We could $md upon the player leaving the tent $md with one or both packets of instant coffee $md simply take author's liberty and describe the making of one lovely cup of Mount Hagen (1 packet), or one very bracingly strong coffee (two packets used). 

Or, we could use $ts and programming logic to simulate the whole process. If this $sg were going to be a lengthy role-playing game of high adventure, I might go for the latter, and even incorporate a sophisticated inventory system. For our purposes, let's just create a simple [[inventory|TwineLesson007Passage007]].

<<tut-links "TwineLesson007Passage005" "TwineLesson007Passage007">>



:: TwineLesson007Passage007 [deonna]
''Creating an inventory system: Step 1'''

The first thing to do is to add a //function// to the Javascript section of $tw. A function? What the heck is that?

I'm glad you asked. A //function// is a little snippet of code. When we (programmatically, through our $ts) tap the function on the shoulder, it turns toward us and performs it's function. Sometimes that function is to print some text, sometimes to manipulate a number. 

To help illustrate how to create and use a function in your $tw, we're going to create one that should be fairly easy to [[grok|TwineLesson007Passage008]].

<<tut-links "TwineLesson007Passage006" "TwineLesson007Passage008">>



:: TwineLesson007Passage008 [deonna]
You know what //grok// means, right? To //grok// something is to comprehend it, to wrap your mind around it, to have a light-bulb moment. With $tut_tit open in the $tw editor, click the $st menu item. You'll see some sub-menu items appear:

<img src="./assets/images/tut-less-7-9/story-js.png">

Click on the $js sub-menu [[item|TwineLesson007Passage009]].

<<tut-links "TwineLesson007Passage007" "TwineLesson007Passage009">>



:: TwineLesson007Passage009 [deonna]
Clicking the $js menu item will bring up an editor window, and you're going to copy/paste (or type it in by hand) the following text:

<pre>setup.DoubleIt = function(mynumber){
	return 2*mynumber;
};</pre>
Yes, I know it looks [[complicated/scary|TwineLesson007Passage010]].

<<tut-links "TwineLesson007Passage008" "TwineLesson007Passage010">>



:: TwineLesson007Passage010 [deonna]

The $js passage editor should now look like this:

<img src="./assets/images/tut-less-7-9/function-double-it.png">

Is that clear as mud? I'll break it down for you. ''setup'' is an object on which we can define functions. If functions were hats and caps, ''setup'' would be the peg board where you hang them.

''DoubleIt'' is my intensely clever name for a function that ... wait for it ... {{{doubles}}} whatever number you give it.

And what about ''mynumber'' that I've placed in [[parentheses|TwineLesson007Passage011]]? 

<<tut-links "TwineLesson007Passage009" "TwineLesson007Passage011">>



:: TwineLesson007Passage011 [deonna]
<pre>setup.DoubleIt = function(mynumber){
	return 2*mynumber;
};</pre>
Well, whatever we place in parentheses when we //call// a function (i.e., tap the function on the shoulder and say 'Do Yer Thang') $md that's called an //argument//.  ''{{{mynumber}}}'' serves as a placeholder for whatever //actual// number we want to send to our function.

''{{{return}}}'' is the keyword that sends the function's result back to our $tw $sg.

And ''{{{2*mynumber}}}'' tells the function: "Hey, take whatever number I give you, double it, and then give me the result."

Let's test this [[function|TwineLesson007Passage012]].

<<tut-links "TwineLesson007Passage010" "TwineLesson007Passage012">>



:: TwineLesson007Passage012 [deonna]
Let's test our shiny new function and see if it works. If you recall, back in Lesson 06 we created a passage named ''{{{CodeTest}}}''. In //that// lesson, we used this passage to test the {{{<<nobr>> <</nobr>>}}} tags. Let's edit that passage now and add the following two lines of code (I recommend you just copy/paste them). You can retain or get rid of the text we used in Lesson 06 to test the {{{<<nobr>>}}} tags.
<pre>If I double the number 8 I get a result of {{{<<= setup.DoubleIt(8)>>}}}.
If I double the number 4.5, I get a result of {{{<<= setup.DoubleIt(4.5)>>}}}.</pre>
Now, let's temporarily make ''{{{CodeTest}}}'' the startup passage by (1) clicking the ''{{{Passage}}}'' menu item, then (2) selecting the ''{{{CodeTest}}}'' passage, then (3) clicking the ''{{{Start Story Here}}}'' [[button|TwineLesson007Passage013]].

<<tut-links "TwineLesson007Passage011" "TwineLesson007Passage013">>



:: TwineLesson007Passage013 [deonna]
Here's what you should see in the $tw editor after following the above steps:
<img src="./assets/images/tut-less-7-9/test-fn-double-it.png">

Now launch the $sg using $bp and let's see our ''{{{Doubleit}}}'' function in [[action|TwineLesson007Passage014]].

<<tut-links "TwineLesson007Passage012" "TwineLesson007Passage014">>



:: TwineLesson007Passage014 [deonna]
And voila! Here's our function strutting its stuff:

<img src="./assets/images/tut-less-7-9/function-in-action.png">

On the next page, we'll see the three things we need when it comes to functions: (a) defining the function, (b) calling the function, and (c) the function in [[action|TwineLesson007Passage015]].

<<tut-links "TwineLesson007Passage013" "TwineLesson007Passage015">>




:: TwineLesson007Passage015 [deonna]
<img src="./assets/images/tut-less-7-9//do-u-grok-it.png">
We'll look into the ''{{{<<=>>}}}'' structure on the next [[page|TwineLesson007Passage016]].

<<tut-links "TwineLesson007Passage014" "TwineLesson007Passage016">>




:: TwineLesson007Passage016 [deonna]
So, what is this structure ''{{{<<=>>}}}'' that we're using to enclose our function calls? Well, it tells $sc, 'print out to the screen whatever the enclosed expression evaluates to'.

So, when we write the following in our $ts, we're telling $tw, "Yo, homie! Process the number 8 through our {{{DoubleIt}}} function and then print the result to the screen": 

''{{{<<= setup.DoubleIt(8)>>}}}''

Let's look at a couple more [[examples|TwineLesson007Passage017]]. 

<<tut-links "TwineLesson007Passage015" "TwineLesson007Passage017">>




:: TwineLesson007Passage017 [deonna]
Feel free to add the following into your ''{{{CodeTest}}}'' passage if you want to test them:

{{{<<set $title to "The Dalai Lama", $profession to "monk", $path to "The Way of Peace">>}}}
{{{<<= $title>> was a <<= $profession>> who followed <<= $path>>.}}}

If you do, here is the output you'll get:

<img src="./assets/images/tut-less-7-9/dalai-lama.png">

Do you //grok// (see what I did there?) what's happening in the above [[code|TwineLesson007Passage018]]?

<<tut-links "TwineLesson007Passage016" "TwineLesson007Passage018">>




:: TwineLesson007Passage018 [deonna]
(1) {{{<<set $title to "The Dalai Lama", $profession to "monk", $path to "The Way of Peace">>}}}
(2) {{{<<= $title>> was a <<= $profession>> who followed <<= $path>>.}}}

In the first line of $ts above, we're using {{{<<set>>}}} to set up three variables. In the $sc story format for $tw, a dollar sign that is the first character in a 'word' signals that we're dealing with a variable. Remember that a variable is just a box where we can store some information. So, were saying:

{{{$title}}} is a box and we're putting this info into it: ''The Dalai Lama''
{{{$profession}}} is a box and we're putting this info into it: ''monk''
{{{$path}}} is a box and we're putting this info into it: ''The Way of Peace''

When our $sg is played in the browser, we're just unboxing the info in those variables (i.e., boxes).  [[Capiche|TwineLesson007Passage019]]?

<<tut-links "TwineLesson007Passage017" "TwineLesson007Passage019">>



:: TwineLesson007Passage019 [deonna]
Before continuing, why don't you try the following exercise: (1) in the ''{{{CodeTest}}}'' passage, use {{{<<set>>}}} to create a variable named {{{$coder}}} and set its information (i.e., its "value") to "a Twine/Sugarcube coder". (2) On the next line, create a sentence that reads "Aren't you proud that I'm becoming a Twine/Sugarcube coder?" $md but here's the catch: do it by using the {{{$coder}}} variable.

Just give it a shot. No harm done if you don't [[succeed|TwineLesson007Passage020]].

<<tut-links "TwineLesson007Passage018" "TwineLesson007Passage020">>



:: TwineLesson007Passage020 [deonna]
Well, how'd you do? Here is the text I put at the top of passage ''{{{CodeTest}}}'':

{{{<<set $coder to "a Twine/Sugarcube coder">>}}}
{{{Aren't you proud that I'm becoming <<= $coder>>?}}}

<img align='left' width=55 src="./assets/images/tut-less-7-9/ball-of-string.png">Okay, it's now time (past time) that you learned about //strings//. in terms of computer programming a string is a collection of individual characters that is enclosed in single- or double-quotes. The quotes are what tell us where the string begins and ends, but are not usually part of the string itself. In the {{{<<set>>}}} above, the string is: ''a Twine/Sugarcube coder''

And "''12345''" is a string, because it's enclosed in quotations, but 12345 is not a string; instead it's the number twelve-thousand three hundred [[forty-five|TwineLesson007Passage021]]

<<tut-links "TwineLesson007Passage019" "TwineLesson007Passage021">>



:: TwineLesson007Passage021 [deonna]
To revisit an example we used earlier:

{{{<<set $title to "The Dalai Lama">>}}}

In the $ts above, {{{$title}}} is what's known in $sc as a {{{Story Variable}}}. It's a box we can put some information in; and once we put the information in it, it stays there $md until either we replace it with different data, or we destroy the box.

''"The Dalai Lama"'' is a string. We've got this box labeled {{{$title}}} and we're sticking the phrase "The Dalai Lama" inside it for safekeeping. The word "to" assigns the {{{string}}} to the {{{Story Variable}}} that we've named ''{{{$title}}}''

On the next page, we'll talk about variable //assignment//. Let's [[$ctl|TwineLesson007Passage022]]

<<tut-links "TwineLesson007Passage020" "TwineLesson007Passage022">>



:: TwineLesson007Passage022 [deonna]

{{{<<set $title to "The Dalai Lama">>}}}

Whether or not you realize it, you've actually used variables in the past. At least, if you took a pre-algebra course you have. The teacher said, "x + 5 equals 7; solve for x" $md and we all said ''"two!"''

And just like in pre-algebra class, we can //assign// a value to a given variable. In the $sc story format, the way we do this is with the ''{{{to}}}'' keyword.

In some programming languages, the equal sign is used for variable assignment (i.e., z = 3). If I told you to create a story variable named cash and assign it a value of 500, what $ts would you write? Give it a think, then see the answer on the next [[page|TwineLesson007Passage023]].

<<tut-links "TwineLesson007Passage021" "TwineLesson007Passage023">>



:: TwineLesson007Passage023 [deonna]
''{{{<<set $cash to 500>>}}}''

Above, I'm telling $sc to set a {{{Story Variable}}} named "cash" and assign it a value of 500. A {{{Story Variable}}} begins with a dollar sign. Don't use hyphens in naming a story variable, and variable names should never contain any spaces. 

Why the term "Story Variable"? Because once we create a variable of this type and assign it a value with the ''{{{to}}}'' keyword, it is available from then on, all throughout our $sg.

By contrast, there is another type of variable in $sc called a //temp variable// $md and it's temporary, so temporary in fact that it's only good for the passage in which it was created. When we move on to another passage in our $sg, any temp variables are done away with. I'll show you on the next page how to create a //temp variable//, and then we'll talk about when to [[use it|TwineLesson007Passage024]].

<<tut-links "TwineLesson007Passage022" "TwineLesson007Passage024">>



:: TwineLesson007Passage024 [deonna]
Temp variables always start with an underscore character. We use them when we only need to store a value briefly during a single passage, and when our $sg has lots of {{{Story Variables}}} we may sometimes use a temp variable to avoid the risk of overwriting a like-named {{{Story Variable}}}. If you know you won't possibly need a particular variable except in the current passage, then make it temporary by prepending the variable name with an underscore:

{{{_counter}}}
{{{_temp}}}
{{{_choice}}}

You say, "I'm not really sure I //grok// the difference between story and temp variables." My response, "For short works coded in $tw and $sc, you probably can get by with using all ''{{{Story Variables}}}''." A couple more things about variables, and then we'll continue buidling our [[story|TwineLesson007Passage025]].

<<tut-links "TwineLesson007Passage023" "TwineLesson007Passage025">>



:: TwineLesson007Passage025 [deonna]
I hear you: //this is too much like work; when do we get on with creating the $sg?// Well, we're laying a foundation. Variables are at the heart of all $tw stories other than the simplest. 

Sometimes, we'll need a particular ''{{{StoryVariable}}}'' for a goodly length of time in a game, but not throughout the entire thing. Imagine that we're writing a story about a fighter working his way up through the ranks in the City Watch. For an extended period of time (perhaps several hours of play-time, or a few hundred passages) we might have a ''{{{StoryVariable}}}'' named {{{$earnedWages}}}, and the story may increment this variable periodically. But when our story's hero $md having attained the lofty rank of City Watch Captain $md happens to save the Duke's son, he's given a knighthood and lands. We no longer need the {{{$earnedWages}}} ''{{{Story Variable}}}''. To get rid of it and free the computer memory it's been using, we can [[unset it|TwineLesson007Passage026]]:

<<tut-links "TwineLesson007Passage024" "TwineLesson007Passage026">>



:: TwineLesson007Passage026 [deonna]

When we unset a variable, it no longer exists:

{{{<<unset $earnedWages>>}}}

If we try to use an unset variable in our $ts, we'll get an error when you play the [[story|TwineLesson007Passage026b]]. 

<<tut-links "TwineLesson007Passage025" "TwineLesson007Passage026b">>



:: TwineLesson007Passage026b
For example, go into the ''{{{CodeTest}}}'' passage and modify the existing $ts by adding a line to {{{unset}}} the {{{$coder}}} variable before we try to use it in a sentence:

<img src="./assets/images/tut-less-7-9/unset-example.png">

After making this change, play our $sg $md first making sure that ''{{{CodeTest}}}'' is still set as the Start passage, of [[course|TwineLesson007Passage027]].

<<tut-links "TwineLesson007Passage026" "TwineLesson007Passage027">>



:: TwineLesson007Passage027 [deonna]
Whaddya know? We get this:

<img src="./assets/images/tut-less-7-9/story-variable-undefined.png">

Morale of the story: if you've {{{unset}}} a variable, you cannot use it anymore $md [[unless|TwineLesson007Passage028]]''...''

<<tut-links "TwineLesson007Passage026" "TwineLesson007Passage028">>




:: TwineLesson007Passage028 [deonna]
Unless, of course, you re-create and assign that same variable once again. Something silly, like this:

<img src="./assets/images/tut-less-7-9/resetting-an-unset-variable.png">

But the above would be redundant: we don't have to unset a variable and recreate it later. Indeed, if we even __might__ need it later, we shouldn't {{{unset}}} it in the first [[place|TwineLesson007Passage029]].



:: TwineLesson007Passage029 [deonna]
And just so that you know, in the event that a variable were to be given multiple assignments, one right after the other, only the last (most recent) assignment matters:

{{{<<set _x to 2>>}}}
{{{<<set _x to 5>>}}}
{{{<<set _x to 3>>}}}
{{{<<print _x>>}}}

If the above is our $ts, the value that will get printed to the screen in our game is ''3''.  [[$ct|TwineLesson007Passage030]].

<<tut-links "TwineLesson007Passage028" "TwineLesson007Passage030">>



:: TwineLesson007Passage030 [deonna]
Now let's talk about the {{{setup}}} object, which I've briefly mentioned before. You saw it used earlier in this lesson when we created a test function on the {{{setup}}} object in our story's Javascript section:

<pre>setup.DoubleIt = function(mynumber){
	return 2*mynumber;
};</pre>
[[$ct|TwineLesson007Passage031]]

<<tut-links "TwineLesson007Passage029" "TwineLesson007Passage031">>



:: TwineLesson007Passage031 [deonna]
The {{{setup}}} object is for 'setting up' variable assignments and functions that will not change any throughout our $sg. For instance, say we want to assign a title to our $sg. That's something that $md once set $md isn't likely to change from playthrough to playthrough, and so it's a good candidate for the {{{setup}}} object. If we want the title to be //A Campfire Tale//, in italics, colored red, a bit larger than other text and centered at the top of the start passage, we could create the following in our story's Javascript section (accessed via menus ''{{{Story}}}'' > $js):

{{{setup.Title = `//A Campfire Tale//`}}}

Let's break down what's happening in the above line of $ts. [[$ct|TwineLesson007Passage032]].

<<tut-links "TwineLesson007Passage030" "TwineLesson007Passage032">>



:: TwineLesson007Passage032 [deonna]
{{{setup.Title = `//A Campfire Tale//`}}}

In our $sg's $js section, we might place the line of $ts shown above. This tells $sc "Place a variable named {{{Title}}} on the setup object. Assign it the {{{string}}} <font color='red'>A Campfire Tale</font> and style it with italics." In $sc, italics are specified using two forward slashes that immediate precede and follow the string we want to [[italicize|TwineLesson007Passage033]].

<<tut-links "TwineLesson007Passage031" "TwineLesson007Passage033">>



:: TwineLesson007Passage033 [deonna]
See the little strange-looking characters that precede and follow ''{{{//A Campfire Tale//}}}''? They're called //backticks//, and below I'll make them larger and more pronounced, for clarity:

<font size="+4">''{{{`}}}''</font>{{{//A Campfire Tale//}}}<font size="+4">''{{{`}}}''</font>

These backticks in the following line tell $sc "Hey, treat everything between these backticks as $ts":

{{{setup.Title = `//A Campfire Tale//`}}}

On the next page, I'll show you how to make use of this variable in our [[story|TwineLesson007Passage034]].

<<tut-links "TwineLesson007Passage032" "TwineLesson007Passage034">>



:: TwineLesson007Passage034 [deonna]
Make ''{{{Campfire}}}'' the startup passage and edit the passage, inserting at the top of the passage:

<img src="./assets/images/tut-less-7-9/print-title.png">

Run the $sg using $bp and let's see what [[happens|TwineLesson007Passage035]].

<<tut-links "TwineLesson007Passage033" "TwineLesson007Passage035">>



:: TwineLesson007Passage035 [deonna]
<img align="left" hspace=10 vspace=8 src="./assets/images/tut-less-7-9/display-title-in-startup.png">Okay, it worked. You can see that it even retains the italics that we specified. We can alter this title's appearance further, if desired. Let's say we want it be centered on the screen, rather than left-aligned. How would we do that? It only requires a pair of HTML tags. Just as we've seen that there are start/end tags for no linebreak (i.e., {{{<<nobr>>}}} and {{{<</nobr>>}}}), there are centering tags we can use to get the desired text-centering. Let's go back into the $js section of our $sg in $tw and modify the {{{Title}}} variable on the setup object as demonstrated on the next [[page|TwineLesson007Passage036]].

<<tut-links "TwineLesson007Passage034" "TwineLesson007Passage036">>



:: TwineLesson007Passage036 [deonna]
We're going to retain everything and just add the start/end tags for centering as shown below:

<img src="./assets/images/tut-less-7-9/center-the-title.png">

Sure enough, if you run the game you'll see that the title is now centered at the top of our ''{{{Campfire}}}'' passage. Perhaps you're like, "Mmmm, it's //okay// but I wish it stood out a bit more." Well, we can make the text a bit larger and turn it [[red|TwineLesson007Passage037]].

<<tut-links "TwineLesson007Passage035" "TwineLesson007Passage037">>




:: TwineLesson007Passage037 [deonna]
Modify our variable on the {{{setup}}} object as shown below:

<center>{{{setup.Title = `<font size="+2" color="red"><center>//A Campfire Tale//</center></font>`}}}</center>

If you didn't make a typo (I recommend copy/paste), then running the story now shows this (image is ~800 pixels wide, so if you're viewing it on a small device...). Let's see the [[results|TwineLesson007Passage037b]]...

<<tut-links "TwineLesson007Passage036" "TwineLesson037Passage037b">>



:: TwineLesson007Passage037b [deonna]
<img src="./assets/images/tut-less-7-9/red-big-centered-title.png">

And while we're focused on the aesthetics of our $sg, wouldn't it be nice to have the dancing flames of an actual campfire directly below our centered title? Imagine if, upon launching our $sg, the player saw [[this|TwineLesson007Passage038]].

<<tut-links "TwineLesson007Passage037" "TwineLesson007Passage038">>



:: TwineLesson007Passage038 [deonna black]
<font size="+2" color="red"><center>//A Campfire Tale//<br>
<img width=150 src="./assets/images/animated/campfire100w.gif"></center></font>

You sit before a cheerful campfire, the crackling flames hypnotic, the warmth from the blaze soothing the cares from your knotted muscles. 

<center><div id="theDiv">This isn't too difficult to accomplish, and I will show you how in a future lesson in this tutorial series. We've covered a lot in this lesson: functions, strings, //story// versus //temp// variables, and the {{{setup}}} object. In Lesson 08, we'll turn our attention to developing a simple inventory system.</div>

[[$ct|TwineLesson008Passage001]] to Lesson 8.
</center>

<<tut-links "TwineLesson007Passage037b" "TwineLesson008Passage001">>



/* End Lesson Seven; Lesson Eight Follows */


:: TwineLesson008Passage001 [deonna]
<h2>$tw & $sc <span class="pulse">Lesson # 8</span> $md A Simple Inventory System</h2>
Welcome to Lesson 8! In this lesson, we'll develop a simple inventory system.

Without further ado, let's jump right into the [[lesson|TwineLesson008Passage002]].

<<tut-links "TwineLesson007Passage038" "TwineLesson008Passage002">>



:: TwineLesson008Passage002 [deonna]
All right, I know that Lesson 007 was painful $md probably. If you've never encountered variables other than in school, it may have made your head ache. But it was //necessary//. I mean, you can make a branching narrative without variables, and it counts as interactive fiction insofar as the player's choices affect which way s/he goes at various branch points. [[But|TwineLesson008Passage003]]...

<<tut-links "TwineLesson008Passage001" "TwineLesson008Passage003">>



:: TwineLesson008Passage003 [deonna]
But ... use of variables is where it's //at// when it comes to creating more complex experiences with $tw. Without variables, you can make chocolate pudding. With variables, you can whip out some Mississippi Mud Pie. The reason for this is that variables enable our $sg to be //stateful// $md stateful in the same way that many beloved video games are stateful, in that they portray and keep track of an entire universe on the head of a pin, so to speak. In short, variables enable //statefulness//, and statefulness creates verisimilitude $md because real life is complex and stories are therefore more absorbing when they mirror this [[complexity|TwineLesson008Passage004]].

<<tut-links "TwineLesson008Passage002" "TwineLesson008Passage004">>



:: TwineLesson008Passage004 [deonna]
It turns out that givng the player of our game or the reader of our story an inventory can, for many people, be an enjoyable and engaging way of contributing to //statefulness//. Another benefit of inventory items is that, along with tracking which passages have been visited and how many times, their presence or absence can open or close various branching paths in our $sg. The most common way of implementing a player's inventory is by using arrays, a programming data [[structure|TwineLesson008Passage005]].

<<tut-links "TwineLesson008Passage003" "TwineLesson008Passage005">>



:: TwineLesson008Passage005 [deonna]
<img width=40 @src="setup.imgs79 + 'box.png'">//Now wait just a minute!// you say. //I haven't finished digesting all that programming stuff from Lesson 7 yet!// I know, and that's okay. Turns out that arrays are just groups of variables. Remember how I told you to think of a variable as a box that can hold some information? Well, an array is a grouping of two or more variables of the same type. If I wanted to specify three {{{string}}} variables, I could put this in my $ts:

{{{<<set $inventory to ['a canteen', 'a pocket knife', 'a handkerchief']>>}}}

On the next page, I'll illustrate how an array [[works|TwineLesson008Passage006]].

<<tut-links "TwineLesson008Passage004" "TwineLesson008Passage006">>



:: TwineLesson008Passage006 [deonna]
<center><img @src="setup.imgs79 + 'array-boxes.png'">

{{{<<set $inventory to ['a canteen', 'a pocket knife', 'a handkerchief']>>}}}</center>
Sticking with our analogy of variables being boxes that can store things in, you can see above both the $ts and a visual representation of an array, which we load with three items we want the player to have in her inventory when our $sg [[begins|TwineLesson008Passage007]].

<<tut-links "TwineLesson008Passage005" "TwineLesson008Passage007">>



:: TwineLesson008Passage007 [deonna]
<img align="left" hspace=10 vspace=8 @src="setup.imgs79 + 'three-vars.png'">Instead of using an array, we //could// instead use three separate string variables:
{{{<<set $inventoryItem1 to "canteen">>}}}
{{{<<set $inventoryItem2 to "pocket knife">>}}}
{{{<<set $inventoryItem3 to "a handkerchief">>}}}<br>
If using $tw is your first foray into programming, you won't yet understand the way that arrays can make our lives easier $md but by and by, you will. Now, let's take our first step toward creating an inventory for $tut_tit. [[$ct|TwineLesson008Passage008]].

<<tut-links "TwineLesson008Passage006" "TwineLesson008Passage008">>



:: TwineLesson008Passage008 [deonna]
To take that first step, we'll need to add the following $ts to our {{{StoryInit}}} passage:
{{{<<set $inventory to ['a canteen', 'a pocket knife', 'a handkerchief']>>}}}

The above line creates an array with three //elements//. Based on previous lessons, can you tell what type of variable this array holds? If you guessed //string//, you're right. It's the quotes that give it [[away|TwineLesson008Passage009]].

<<tut-links "TwineLesson008Passage007" "TwineLesson008Passage009">>



:: TwineLesson008Passage009
<img hspace=5 @src="setup.imgs79 + 'tag-button.png'">The next step is to create a new passage named {{{YourInventory}}}. After creating the passage, we're going to do something we haven't done previously in this tutorial series: add a //tag// to the passage. That tag should be the word "noreturn". To add the tag, open the {{{YourInventory}}} passage in an editor window, then click the "Add Tag" button and type in 'noreturn' $md without the quotes:

<img @src="setup.imgs79 + 'psg-your-inventory.png'">

In the {{{YourInventory}}} passage, write "You're viewing your inventory..." We now have an array of three items forming the player's inventory, and we've created a passage to display the array's [[contents|TwineLesson008Passage010]].

<<tut-links "TwineLesson008Passage008" "TwineLesson008Passage010">>



:: TwineLesson008Passage010
Now, if there were only a way for the player to view the contents of their inventory when desired $md but it would stay out of sight and out of mind the rest of the time. Put this placeholder text in passage {{{YourInventory}}}: //you're viewing your inventory...// Now, instead of linking to this passage in the ordinary way, let's create another passage $md a special one named {{{StoryMenu}}}.

In {{{StoryMenu}}}, add the following line of $ts:
{{{<<link "Inventory">><<goto YourInventory>><</link>><br>}}}

Then save your [[changes|TwineLesson008Passage011]].

<<tut-links "TwineLesson008Passage009" "TwineLesson008Passage011">>




:: TwineLesson008Passage011
Now, we're going to add a function to the javascript section of your story. To do that, click the {{{Story}}} menu item, then the {} {{{Javascript}}} button. Here is the function you'll copy/paste into the javascript section of your story (don't overwrite the other stuff that's already there $md just add this function above or below that stuff):
 
 {{{$(document).on(":passagestart", function (event) {}}}
<span class="tab">{{{/* Make sure the current passage doesn't have a "noreturn" tag. */}}}</span>
<span class="tab">{{{if (!tags().includes("noreturn")) {}}}</span>
<span class="tab"><span class="tab">{{{/* If it doesn't, then set $return to the current passage name. */}}}</span></span>
<span class="tab"><{{{State.variables.return = passage();}}}</span>
<span class="tab">}</span>
});

For the time being, don't worry too much about why the above function is important. Just know that it works hand-in-hand with the 'noreturn' tag that we added to the {{{YourInventory}}} [[passage|TwineLesson008Passage012]]. 

<<tut-links "TwineLesson008Passage010" "TwineLesson008Passage012">>



:: TwineLesson008Passage012
<img align="left" hspace=10 vspace=3 @src="setup.imgs79 + 'inventory-button.png'">Let's launch our $sg and see what we have wrought. In the game, as it runs in your default browser, notice that there is now an Inventory button in the sidebar. That's because of the StoryMenu passage we added, and the $ts we put in that passage. If you click on it, what it shows isn't particularly helpful, but you can then just use the Back button to get back to wherever you were before clicking on the sidebar's Inventory button. On the next page, we'll work on making our {{{YourInventory}}} passage more [[helpful|TwineLesson008Passage013]].

<<tut-links "TwineLesson008Passage011" "TwineLesson008Passage013">>




:: TwineLesson008Passage013
Now, let's replace the current text in our {{{YourInventory}}} passage with:
{{{<<nobr>>Your inventory contains:}}} 

{{{<<if $inventory.length lt 1>>nothing<<elseif $inventory.length eq 1>>1 item
<<else>><<= $inventory.length>> items<</if>>}}}

{{{<br><br>}}}
{{{<<if $inventory.length eq 1>>$inventory[0]<</if>>}}}
{{{<<if $inventory.length gt 1>>}}}
<span class="tab">{{{<<= $inventory.join(`<br>`)>><br>}}}</span>
{{{<</if>>}}}
{{{<</nobr>>}}}

It might be best to copy/paste the above $ts into the {{{YourInventory}}} [[passage|TwineLesson008Passage014]].

<<tut-links "TwineLesson008Passage012" "TwineLesson008Passage014">>



:: TwineLesson008Passage014
After adding the $ts from the previous page to the {{{YourInventory}}} passage, run the $sg again and click on the Inventory button in the sidebar. You'll get a much more helpful printout to the screen this time:

<img @src="setup.imgs79 + 'useful-inventory-msg.png'">

Well now, that's a much more useful message, [[right|TwineLesson008Passage015]]?

<<tut-links "TwineLesson008Passage013" "TwineLesson008Passage015">>



:: TwineLesson008Passage015
Conventiently, thanks to the function we added to our story javascript section, after using the sidebar's Inventory button, you can simply click the back button to return to wherevver you were before examining your inventory. For instance, if before clicking the Inventory button you had navigated to your tent, then upon clicking the Back button after viewing your inventory, you'd be taken back to the following [[passage|TwineLesson008Passage016]]:

<img @src="setup.imgs79 + 'tent-psg-desc.png'">



:: TwineLesson008Passage016
Well, we have an inventory and we can access it by using the dedicated button in the sidebar. But you may not understand the $ts that actually displays our inventory items (I've formatted the code to be a bit more readable):
<<nobr>><center><table border=1 id='codeExplain'>

<tr>
<td>{{{<<nobr>>Your inventory contains:}}}<br>
{{{<<if $inventory.length lt 1>>}}}<br>
<span class="tab">nothing</span><br>
{{{<<elseif $inventory.length eq 1>>}}}<br>
<span class="tab">1 item</span><br>
{{{<<else>>}}}<br>
<span class="tab">{{{<<= $inventory.length>> items}}}</span><br>
{{{<</if>>}}}<br>
{{{<br><br>}}}<br>
{{{<<if $inventory.length eq 1>>}}}<br>
<span class="tab">{{{$inventory[0]}}}</span><br>
{{{<</if>>}}}<br>
{{{<<if $inventory.length gt 1>>}}}<br>
<span class="tab">{{{<<= $inventory.join(`<br>`)>><br>}}}</span><br>
{{{<</if>>}}}<br>
{{{<</nobr>>}}}</td>

<td>You look at the accompanying $ts and say that you understand //Your inventory contains:// but then not much else!<br><br>Well, that's why you're reading this tutorial $md to learn. You'll notice that all the other text comes sandwiched between opening and closing no-break tags: {{{<<nobr>>}}} and {{{<</nobr>>}}}. What that means is that there won't be any line breaks in the text produced by this passage $md unless we explicitly add this code to tell the browser to add a line-break: {{{<br>}}}.<br><br>

So, we can mentally simplify the actual code to this pseudo-code:<br><br>
''+ print "Your inventory contains:" on a line at the top, by itself''<br>
''+ print some other stuff if the right conditions are met''<br><br>

We're going to divide this //conditional// code into a couple of sections by introduce {{{widgets}}}.<br><br>
You may have to scroll down for the Next Page link...
</td>
</tr>
</table><br><br>When you're ready, [[$ctl|TwineLesson008Passage017]] to the next page.</center>
<</nobr>>

<<tut-links "TwineLesson008Passage015" "TwineLesson008Passage017">>



:: TwineLesson008Passage017
We're going to create a pair of {{{widgets}}}, each of which will encapsulate some of our conditionals (our {{{<<if>>...<</if>>}}} structures in our {{{YourInventory}}} passage).

<img align="left" hspace=10 vspace=10 @src="setup.imgs79 + 'mywidgets-psg.png'">So, create a new passage and name it {{{MyWidgets}}}. Then add to this passage a tag named {{{widget}}} (singular, no 's').  

On the next page we'll pull part of the $ts from our {{{YourInventory}}} passage and place it into a {{{widget}}}. Widgets are denoted by the following opening and closing tags: {{{<<widget>>}}} and {{{<</widget>>}}}.

Let's [[$ctl|TwineLesson008Passage018]].

<<tut-links "TwineLesson008Passage016" "TwineLesson008Passage018">>



:: TwineLesson008Passage018
In the {{{MyWidgets}}} passage, add the following:

{{{<<widget "InventoryItemCount">>}}}
{{{<</widget>>}}}

Congratulations, you just created your first $sc {{{widget}}}. It doesn't yet //do// anything, but we'll get to [[that|TwineLesson008Passage019]].

<<tut-links "TwineLesson008Passage017" "TwineLesson008Passage019">>



:: TwineLesson008Passage019
You've created your first {{{widget}}}. How about we score another //first//? Let's add a comment into the {{{MyWidgets}}} passage. Modify the contents of the {{{MyWidgets}}} passage to the following:

{{{<<widget "InventoryItemCount">>}}}
{{{/* This widget prints a message to the browser window telling the player how many items are in her inventory. I still need to add the Twinescript needed to accomplish this -- but all I have to do is copy/paste it from the YourInventory passage. */}}}
{{{<</widget>>}}}

A //comment// is text that $tw ignores but which is helpful to us as the $sg writer. Comments are used to explain why we're writing the $ts, or how it works. We can also use comments to leave ourselves reminders, such as a TO-DO [[list|TwineLesson008Passage020]].

<<tut-links "TwineLesson008Passage018" "TwineLesson008Passage020">>



:: TwineLesson008Passage020
{{{<<widget "InventoryItemCount">>}}}
{{{/* This widget prints a message to the browser window telling the player how many items are in her inventory. I still need to add the Twinescript needed to accomplish this -- but all I have to do is copy/paste it from the YourInventory passage. */}}}
{{{<</widget>>}}}

In the above code, the comment begins with this pair of characters: ''{{{/*}}}'' and ends with this pair: ''{{{*/}}}''. This is known as C-style commenting, because it originated in the programming language ''C''. Writing comments with your code is a good habit to form. When programming, we can get into //the zone// and feel like we totally understand everything we're typing $md but coming back to the script a week or a month later, you may find yourself very glad you added [[comments|TwineLesson008Passage021]].

<<tut-links "TwineLesson008Passage019" "TwineLesson008Passage021">>



:: TwineLesson008Passage021
Adding the needed $ts and modifying the comment, our macro should now look like this:

<<nobr>>{{{<<widget "InventoryItemCount">>}}}<br>
{{{/* This widget prints a message to the browser window telling the player how many items are in her inventory. */ }}}<br>
{{{<<nobr>>Your inventory contains:}}}<br>
{{{<<if $inventory.length lt 1>>}}}<br>
<span class="tab">nothing</span><br>
{{{<<elseif $inventory.length eq 1>>}}}<br>
<span class="tab">1 item</span><br>
{{{<<else>>}}}<br>
<span class="tab">{{{<<= $inventory.length>> items}}}</span>
{{{<</if>>}}}<br>
{{{<</nobr>><</widget>>}}}<</nobr>>

Drop down a couple lines past the end of our {{{InventoryItemCount}}} widget and we'll add another [[widget|TwineLesson008Passage022]].

<<tut-links "TwineLesson008Passage020" "TwineLesson008Passage022">>



:: TwineLesson008Passage022
{{{<<widget "InventoryItemListing">>}}}
{{{/* This widget prints the inventory's items,
one per line */}}}
{{{<<nobr>><<if $inventory.length eq 1>>}}}
<span class="tab">$inventory[0]</span>
{{{<</if>>}}}
{{{<<if $inventory.length gt 1>>}}}
<span class="tab">{{{<<= $inventory.join(`<br>`)>><br>}}}</span>
{{{<</if>>}}}
{{{<</nobr>><</widget>>}}}

Now we can return to our {{{YourInventory}}} passage and simplify its $ts to the [[following|TwineLesson008Passage023]].

<<tut-links "TwineLesson008Passage021" "TwineLesson008Passage023">>



:: TwineLesson008Passage023
{{{<<nobr>>}}}
{{{<<InventoryItemCount>>}}}
{{{<<InventoryItemListing>>}}}
{{{<</nobr>>}}}

For convenience, I have a Github <a target="_new" href="https://gist.github.com/kyrathasoft/b6153bd47a0fa0a9bd1c8559df6ed7c9">gist</a> showing the $ts for both widgets and for calling them from passage {{{YourInventory}}}. Let's [[$ctl|TwineLesson008Passage024]].

<<tut-links "TwineLesson008Passage022" "TwineLesson008Passage021">>



:: TwineLesson008Passage024
Psg 24











/*

The anatomy of an inventory system:
(a) the arbitrarily long return function
(b) creating the YourInventory passage with a [noreturn] tag
(c) creating the StoryMenu passage so we can link to YourInventory
(d) give the player some starting inventory items (optional)


<<nobr>><<set $inventory to []>>
<<run $inventory.push('a sword');>>
<<run $inventory.push('a coffee packet');>>
<<run $inventory.push('a handkerchief');>>
<<set $chest to ['a bag of gold', 'a dagger']>><</nobr>>

Your inventory contains: <<= $inventory.length>> items. They are: <<= $inventory.join(', ')>>.
<<set $inventory to $inventory.concat($chest)>>
You add the chest's contents to your inventory.
Now your inventory contains: <<= $inventory.join(', ')>>.
<<if $inventory.includes('a sword')>><<if $inventory.includes('a dagger')>>Good idea. Dual wielded weapons!<</if>><</if>>
*/